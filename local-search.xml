<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>146:LRU缓存</title>
    <link href="/2025/07/23/146-LRU%E7%BC%93%E5%AD%98/"/>
    <url>/2025/07/23/146-LRU%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>说说怎么背这道题。</p><p>需要运用 双端队列和哈希表，这是一种复合数据结构，如python中的OrderedDict<br>哈希表只是根据key,能找到对应的node,即&lt;key,node*&gt;<br>双端队列是双值双指针的形式,key,value,*prev,*next<br>哈希表的操作，API已经提供了，现在就是看自己创建双端队列，并看其需要哪些操作。<br>python中API叫 move_to_end，所谓move操作，就是一个删除操作，一个插入操作。<br>所以双端队列的基本操作需要删掉节点，和插入节点到最新这两个。<br>3.到目前位置双端队列和哈希表的基本操作都够了，现在就是LRUCache这个复合类需要哪些操作。get_node这个名字起的很好，我开始觉得应该叫做find_node,因为是根据key，找到返回node,找不到返回nullptr,但这个题让我们写一个API叫做put,根据key，找到返回value，找不到返回-1。那我们这个额外的API叫做get_node那就再合适不过了。<br>4.到目前位置put,和get怎么写其实就很简单了。<br>get操作，只会更新双端队列类的元素<br>put操作，即会更新双端队列类的操作，也会更新哈希表类的元素。<br>总结一下：<br>1.两个数据结构，双端队列和哈希表<br>2.需要自己自定义双端队列和其基本操作删除和插入操作<br>3.定义get_node API，这个才是这个复合数据结构的操作，剩下就是记得怎么更新双端队列和哈希表了</p><p>额外说下dummy的作用：<br>1.快速找到双端队列中最末尾的节点<br>2.插入时，快速找到最新位置<br>3.操作可以不区分head节点和tail节点，让其更普通节点一样</p><p>总结：同化了head节点和tail节点的操作，要提供了快速找到head和tail的方法。额外的一点空间却极大简化的操作。妙！</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>List一些问题</title>
    <link href="/2025/07/20/List%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/20/List%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a><strong>引言</strong></h2><p>在Java集合中，ArrayList是最常用到的数据结构，无论是在日常开发还是面试中，但是很多人对它的源码并不了解。下面提问几个问题，检验一下大家对ArrayList的了解程度。</p><ol><li>ArrayList的初始容量是多少？（90%的人都会答错）</li><li>ArrayList的扩容机制</li><li>并发修改ArrayList元素会有什么问题</li><li>如何快速安全的删除ArrayList中的元素</li></ol><p>接下来一块分析一下ArrayList的源码，看完ArrayList源码之后，可以轻松解答上面四个问题。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>ArrayList底层基于数组实现，可以随机访问，内部使用一个Object数组来保存元素。它维护了一个 <code>elementData</code> 数组和一个 <code>size</code> 字段，<code>elementData</code>数组用来存放元素，<code>size</code>字段用于记录元素个数。它允许元素是null，可以动态扩容。</p><p><img src="https://pic4.zhimg.com/v2-95923250063b6d7327c36e08fdbbae73_1440w.jpg" alt="img"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h2><p>当我们调用ArrayList的构造方法的时候，底层实现逻辑是什么样的？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 调用无参构造方法，初始化ArrayList</span><br>List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">// 调用有参构造方法，初始化ArrayList，指定容量为10</span><br>List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>看一下底层源码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 默认容量大小</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 空数组</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<br><br><span class="hljs-comment">// 默认容量的数组对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><br><span class="hljs-comment">// 存储元素的数组</span><br><span class="hljs-keyword">transient</span> Object[] elementData;<br><br><span class="hljs-comment">// 数组中元素个数，默认是0</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br><span class="hljs-comment">// 无参初始化，默认是空数组</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><br><span class="hljs-comment">// 有参初始化，指定容量大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 直接使用指定的容量大小</span><br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+initialCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到当我们调用ArrayList的无参构造方法 <code>new ArraryList&lt;&gt;()</code> 的时候，只是初始化了一个空对象，并没有指定数组大小，所以初始容量是零。至于什么时候指定数组大小，接着往下看。</p><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a><strong>添加元素</strong></h2><p>再看一下往ArrayList种添加元素时，调用的 <code>add() </code>方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加元素</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>  <span class="hljs-comment">// 确保数组容量够用，size是元素个数</span><br>  ensureCapacityInternal(size + <span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 直接在下个位置赋值</span><br>  elementData[size++] = e;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 确保数组容量够用</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));<br>&#125;<br><br><span class="hljs-comment">// 计算所需最小容量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateCapacity</span><span class="hljs-params">(Object[] elementData, <span class="hljs-type">int</span> minCapacity)</span> &#123;<br>   <span class="hljs-comment">// 如果数组等于空数组，就设置默认容量为10</span><br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class="hljs-keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    <span class="hljs-keyword">return</span> minCapacity;<br>&#125;<br><br><span class="hljs-comment">// 确保容量够用</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    modCount++;<br>   <span class="hljs-comment">// 如果所需最小容量大于数组长度，就进行扩容</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下扩容逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 扩容，就是把旧数据拷贝到新数组里面</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>  <span class="hljs-comment">// 计算新数组的容量大小，是旧容量的1.5倍</span><br>  <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br><br>  <span class="hljs-comment">// 如果扩容后的容量小于最小容量，扩容后的容量就等于最小容量</span><br>  <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>    newCapacity = minCapacity;<br><br>  <span class="hljs-comment">// 如果扩容后的容量大于Integer的最大值，就用Integer最大值</span><br>  <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>    newCapacity = hugeCapacity(minCapacity);<br> <br>  <span class="hljs-comment">// 扩容并赋值给原数组</span><br>  elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到：</p><ul><li>扩容的触发条件是数组全部被占满</li><li>扩容是以旧容量的1.5倍扩容，并不是2倍扩容</li><li>最大容量是Integer的最大值</li><li>添加元素时，没有对元素校验，允许为null，也允许元素重复。</li></ul><p>再看一下数组拷贝的逻辑，这里都是Arrays类里面的方法了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> original  原数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> newLength 新的容量大小</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class="hljs-type">int</span> newLength) &#123;<br>    <span class="hljs-keyword">return</span> (T[]) copyOf(original, newLength, original.getClass());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="hljs-type">int</span> newLength, Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">T</span>[]&gt; newType) &#123;<br>    <span class="hljs-comment">// 创建一个新数组，容量是新的容量大小</span><br>    T[] copy = ((Object)newType == (Object)Object[].class)<br>        ? (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[newLength]<br>        : (T[]) Array.newInstance(newType.getComponentType(), newLength);<br>   <span class="hljs-comment">// 把原数组的元素拷贝到新数组</span><br>    System.arraycopy(original, <span class="hljs-number">0</span>, copy, <span class="hljs-number">0</span>,<br>                     Math.min(original.length, newLength));<br>    <span class="hljs-keyword">return</span> copy;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终调用了System类的数组拷贝方法，是native方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> src     原数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> srcPos  原数组的开始位置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dest    目标数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> destPos 目标数组的开始位置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> length  被拷贝的长度</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arraycopy</span><span class="hljs-params">(Object src,  <span class="hljs-type">int</span>  srcPos,</span><br><span class="hljs-params">                                    Object dest, <span class="hljs-type">int</span> destPos,</span><br><span class="hljs-params">                                    <span class="hljs-type">int</span> length)</span>;<br></code></pre></td></tr></table></figure><p>总结一下ArrayList的 <code>add()</code> 方法的逻辑：</p><ol><li>检查容量是否够用，如果够用，直接在下一个位置赋值结束。</li><li>如果是第一次添加元素，则设置容量默认大小为10。</li><li>如果不是第一次添加元素，并且容量不够用，则执行扩容操作。扩容就是创建一个新数组，容量是原数组的1.5倍，再把原数组的元素拷贝到新数组，最后用新数组对象覆盖原数组。</li></ol><p>需要注意的是，每次扩容都会创建新数组和拷贝数组，会有一定的时间和空间开销。在创建ArrayList的时候，如果我们可以提前预估元素的数量，最好通过有参构造函数，设置一个合适的初始容量，以减少动态扩容的次数。</p><h2 id="删除单个元素"><a href="#删除单个元素" class="headerlink" title="删除单个元素"></a><strong>删除单个元素</strong></h2><p>再看一下删除元素的方法 <code>remove()</code> 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>   <span class="hljs-comment">// 判断要删除的元素是否为null</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-comment">// 遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; size; index++)<br>           <span class="hljs-comment">// 如果和当前位置上的元素相等，就删除当前位置上的元素</span><br>            <span class="hljs-keyword">if</span> (elementData[index] == <span class="hljs-literal">null</span>) &#123;<br>                fastRemove(index);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-comment">// 遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; size; index++)<br>           <span class="hljs-comment">// 如果和当前位置上的元素相等，就删除当前位置上的元素</span><br>            <span class="hljs-keyword">if</span> (o.equals(elementData[index])) &#123;<br>                fastRemove(index);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除该位置上的元素</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fastRemove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    modCount++;<br>   <span class="hljs-comment">// 计算需要移动的元素的个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>       <span class="hljs-comment">// 从index+1位置开始拷贝，也就是后面的元素整体向左移动一个位置</span><br>        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index, numMoved);<br>   <span class="hljs-comment">// 设置数组最后一个元素赋值为null，防止会导致内存泄漏</span><br>    elementData[--size] = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除元素的流程是：</p><ol><li>判断要删除的元素是否为null，如果为null，则遍历数组，使用双等号比较元素是否相等。如果不是null，则使用 <code>equals()</code> 方法比较元素是否相等。这里就显得啰嗦了，可以使用 <code>Objects.equals()</code>方法，合并ifelse逻辑。</li><li>如果找到相等的元素，则把后面位置的所有元素整体相左移动一个位置，并把数组最后一个元素赋值为null结束。</li></ol><p>可以看到遍历数组的时候，找到相等的元素，删除就结束了。如果ArrayList中存在重复元素，也只会删除其中一个元素。</p><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a><strong>批量删除</strong></h2><p>再看一下批量删除元素方法 <code>removeAll()</code> 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 批量删除ArrayList和集合c都存在的元素</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeAll</span><span class="hljs-params">(Collection&lt;?&gt; c)</span> &#123;<br>    <span class="hljs-comment">// 非空校验</span><br>    Objects.requireNonNull(c);<br>    <span class="hljs-comment">// 批量删除</span><br>    <span class="hljs-keyword">return</span> batchRemove(c, <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">batchRemove</span><span class="hljs-params">(Collection&lt;?&gt; c, <span class="hljs-type">boolean</span> complement)</span>&#123;<br>    <span class="hljs-keyword">final</span> Object[] elementData = <span class="hljs-built_in">this</span>.elementData;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, w = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">modified</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (; r &lt; size; r++)<br>            <span class="hljs-keyword">if</span> (c.contains(elementData[r]) == complement)<br>                <span class="hljs-comment">// 把需要保留的元素左移</span><br>                elementData[w++] = elementData[r];<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>  <span class="hljs-comment">// 当出现异常情况的时候，可能不相等</span><br>        <span class="hljs-keyword">if</span> (r != size) &#123;<br>            <span class="hljs-comment">// 可能是其它线程添加了元素，把新增的元素也左移</span><br>            System.arraycopy(elementData, r,<br>                             elementData, w,<br>                             size - r);<br>            w += size - r;<br>        &#125;<br>       <span class="hljs-comment">// 把不需要保留的元素设置为null</span><br>        <span class="hljs-keyword">if</span> (w != size) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> w; i &lt; size; i++)<br>                elementData[i] = <span class="hljs-literal">null</span>;<br>            modCount += size - w;<br>            size = w;<br>            modified = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> modified;<br>&#125;<br></code></pre></td></tr></table></figure><p>批量删除元素的逻辑，并不是大家想象的：</p><blockquote><p>遍历数组，判断要删除的集合中是否包含当前元素，如果包含就删除当前元素。删除的流程就是把后面位置的所有元素整体左移，然后把最后位置的元素设置为null。</p></blockquote><p>这样删除的操作，涉及到多次的数组拷贝，性能较差，而且还存在并发修改的问题，就是一边遍历，一边更新原数组。 批量删除元素的逻辑，设计充满了巧思，具体流程就是：</p><ol><li>把需要保留的元素移动到数组左边，使用下标 <code>w</code> 做统计，下标 <code>w</code> 左边的是需要保留的元素，下标 <code>w</code> 右边的是需要删除的元素。</li><li>虽然ArrayList不是线程安全的，也考虑了并发修改的问题。如果上面过程中，有其他线程新增了元素，把新增的元素也移动到数组左边。</li><li>最后把数组中下标 <code>w</code> 右边的元素都设置为null。</li></ol><p>所以当需要批量删除元素的时候，尽量使用 <code>removeAll()</code> 方法，性能更好。</p><h2 id="并发修改的问题"><a href="#并发修改的问题" class="headerlink" title="并发修改的问题"></a><strong>并发修改的问题</strong></h2><p>当遍历ArrayList的过程中，同时增删ArrayList中的元素，会发生什么情况？测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建ArrayList，并添加4个元素</span><br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 遍历ArrayList</span><br>        <span class="hljs-keyword">for</span> (Integer key : list) &#123;<br>            <span class="hljs-comment">// 判断如果元素等于2，则删除</span><br>            <span class="hljs-keyword">if</span> (key.equals(<span class="hljs-number">2</span>)) &#123;<br>                list.remove(key);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException<br> at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:911)<br> at java.util.ArrayList$Itr.next(ArrayList.java:861)<br> at com.yideng.Test.main(Test.java:14)<br></code></pre></td></tr></table></figure><p>报出了并发修改的错误，<code>ConcurrentModificationException</code>。 这是因为 <code>forEach</code> 使用了ArrayList内置的迭代器，这个迭代器在迭代的过程中，会校验修改次数 <code>modCount</code>，如果 <code>modCount</code> 被修改过，则抛出<code>ConcurrentModificationException</code>异常，快速失败，避免出现不可预料的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ArrayList内置的迭代器</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>    <span class="hljs-type">int</span> cursor;       <br>    <span class="hljs-type">int</span> <span class="hljs-variable">lastRet</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <br>    <span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<br>    <br>    <span class="hljs-comment">// 迭代下个元素</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 校验 modCount</span><br>        checkForComodification();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> cursor;<br>        <span class="hljs-keyword">if</span> (i &gt;= size)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>        Object[] elementData = ArrayList.<span class="hljs-built_in">this</span>.elementData;<br>        <span class="hljs-keyword">if</span> (i &gt;= elementData.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        cursor = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> (E)elementData[lastRet = i];<br>    &#125;<br><br>    <span class="hljs-comment">// 校验 modCount 是否被修改过</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkForComodification</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想要安全的删除某个元素，可以使用 <code>remove(int index)</code> 或者 <code>removeIf()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建ArrayList，并添加4个元素</span><br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 使用 remove(int index) 删除元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (list.get(i).equals(<span class="hljs-number">2</span>)) &#123;<br>                list.remove(i);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 使用removeIf删除元素</span><br>        list.removeIf(key -&gt; key.equals(<span class="hljs-number">2</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>现在可以回答文章开头提出的问题了吧：</p><ol><li>ArrayList的初始容量是多少？</li></ol><p>答案：初始容量是0，在第一次添加元素的时候，才会设置容量为10。</p><ol><li>ArrayList的扩容机制</li></ol><p>答案：</p><ol><li>创建新数组，容量是原来的1.5倍。</li><li>把旧数组元素拷贝到新数组中</li><li>使用新数组覆盖旧数组对象</li><li>并发修改ArrayList元素会有什么问题</li></ol><p>答案：会快速失败，抛出<code>ConcurrentModificationException</code>异常。</p><ol><li>如何快速安全的删除ArrayList中的元素</li></ol><p>答案：使用<code>remove(int index)</code> 、 <code>removeIf()</code> 或者 <code>removeAll()</code> 方法。 我们知道ArrayList并不是线程安全的，原因是它的 <code>add()</code> 、<code>remove()</code> 方法、<code>扩容</code>操作都没有加锁，多个线程并发操作ArrayList的时候，会出现数据不一致的情况。 想要线程安全，其中一种方式是初始化ArrayList的时候使用 <code>Collections.synchronizedCollection()</code> 修饰。这样ArrayList所有操作都变成同步操作，性能较差。还有一种性能较好，又能保证线程安全的方式是使用 <code>CopyOnWriteArrayList</code>，就是下章要讲的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第一种方式，使用 Collections.synchronizedCollection() 修饰</span><br>List&lt;Integer&gt; list1 = Collections.synchronizedCollection(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br><br><span class="hljs-comment">// 第二种方式，使用 CopyOnWriteArrayList</span><br>List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>右视图</title>
    <link href="/2025/07/11/%E5%8F%B3%E8%A7%86%E5%9B%BE/"/>
    <url>/2025/07/11/%E5%8F%B3%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199. 二叉树的右视图</a></p><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p><strong>示例 1：</strong></p><p>**输入：**root &#x3D; [1,2,3,null,5,null,4]</p><p><strong>输出：</strong>[1,3,4]</p><p><strong>解释：</strong></p><p><img src="https://assets.leetcode.com/uploads/2024/11/24/tmpd5jn43fs-1.png" alt="img"></p><p><strong>示例 2：</strong></p><p>**输入：**root &#x3D; [1,2,3,4,null,null,null,5]</p><p><strong>输出：</strong>[1,3,4,5]</p><p><strong>解释：</strong></p><p><img src="https://assets.leetcode.com/uploads/2024/11/24/tmpkpe40xeh-1.png" alt="img"></p><p><strong>示例 3：</strong></p><p>**输入：**root &#x3D; [1,null,3]</p><p><strong>输出：</strong>[1,3]</p><p><strong>示例 4：</strong></p><p>**输入：**root &#x3D; []</p><p><strong>输出：</strong>[]</p><p><strong>提示:</strong></p><ul><li>二叉树的节点个数的范围是 <code>[0,100]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>方法一：深度优先搜索<br>思路</p><p>我们对树进行深度优先搜索，在搜索过程中，我们总是先访问右子树。那么对于每一层来说，我们在这层见到的第一个结点一定是最右边的结点。</p><p>算法</p><p>这样一来，我们可以存储在每个深度访问的第一个结点，一旦我们知道了树的层数，就可以得到最终的结果数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">rightSideView</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        dfs(root, <span class="hljs-number">1</span>, ans);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node, <span class="hljs-type">int</span> i, List&lt;Integer&gt; ans)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &gt; ans.size()) &#123;<br>            ans.add(node.val);<br>        &#125;<br>        dfs(node.right, ++i, ans);<br>        dfs(node.left, i, ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：广度优先搜索"><a href="#方法二：广度优先搜索" class="headerlink" title="方法二：广度优先搜索"></a>方法二：广度优先搜索</h4><p><strong>思路</strong></p><p>我们可以对二叉树进行层次遍历，那么对于每层来说，最右边的结点一定是最后被遍历到的。二叉树的层次遍历可以用广度优先搜索实现。</p><p><strong>算法</strong></p><p>执行广度优先搜索，左结点排在右结点之前，这样，我们对每一层都从左到右访问。因此，只保留每个深度最后访问的结点，我们就可以在遍历完整棵树后得到每个深度最右的结点。除了将栈改成队列，并去除了 <code>rightmost_value_at_depth</code> 之前的检查外，算法没有别的改动。</p><p><img src="https://assets.leetcode-cn.com/solution-static/199/fig2.png" alt="fig2"></p><p>上图表示了同一个示例，红色结点自上而下组成答案，边缘以访问顺序标号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">rightSideView</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>        Deque&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        queue.offer(root);<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> queue.size();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> size;<br>            <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">poll</span> <span class="hljs-operator">=</span> queue.poll();<br>                <span class="hljs-keyword">if</span> (size == temp) &#123;<br>                    ans.add(poll.val);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (poll.right != <span class="hljs-literal">null</span>) &#123;<br>                    queue.offer(poll.right);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (poll.left != <span class="hljs-literal">null</span>) &#123;<br>                    queue.offer(poll.left);<br>                &#125;<br>                size--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>讲解#大括号和$大括号</title>
    <link href="/2025/07/10/%E8%AE%B2%E8%A7%A3/"/>
    <url>/2025/07/10/%E8%AE%B2%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhida.zhihu.com/search?content_id=113073721&content_type=Article&match_order=1&q=Mybatis&zhida_source=entity">Mybatis</a>的<a href="https://zhida.zhihu.com/search?content_id=113073721&content_type=Article&match_order=1&q=Mapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6&zhida_source=entity">Mapper映射文件</a>中，有两种方式可以引用形参变量进行取值: #{} 和 ${}。本文将简述两种方式的区别和适用场景</p><h2 id="取值引用"><a href="#取值引用" class="headerlink" title="取值引用"></a>取值引用</h2><h2 id="方式"><a href="#方式" class="headerlink" title="#{} 方式"></a>#{} 方式</h2><p>#{}: 解析为SQL时，会将形参变量的值取出，并自动给其添加引号。 例如：当实参username&#x3D;”Amy”时，传入下Mapper映射文件后</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">......<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>        SELECT * FROM user WHERE username=#&#123;value&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    ....<br></code></pre></td></tr></table></figure><p>SQL将解析为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span>&quot;Amy&quot;<br></code></pre></td></tr></table></figure><h2 id="方式-1"><a href="#方式-1" class="headerlink" title="${} 方式"></a>${} 方式</h2><p>${}: 解析为SQL时，将形参变量的值直接取出，直接拼接显示在SQL中</p><p>例如：当实参username&#x3D;”Amy”时，传入下Mapper映射文件后</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">......<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>        SELECT * FROM user WHERE username=$&#123;value&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    ....<br></code></pre></td></tr></table></figure><p>SQL将解析如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span>Amy<br></code></pre></td></tr></table></figure><p>显而该SQL无法正常执行，故需要在mppaer映射文件中的${value}前后手动添加引号，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">......<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>        SELECT * FROM user WHERE username=&#x27;$&#123;value&#125;&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    ....<br></code></pre></td></tr></table></figure><p>SQL将解析为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Amy&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>${}方式是将形参和SQL语句直接拼接形成完整的SQL命令后，再进行编译，所以可以通过精心设计的形参变量的值，来改变原SQL语句的使用意图从而产生安全隐患，即为<a href="https://zhida.zhihu.com/search?content_id=113073721&content_type=Article&match_order=1&q=SQL%E6%B3%A8%E5%85%A5&zhida_source=entity">SQL注入</a>攻击。现举例说明：</p><p>现有Mapper映射文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">......<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>        SELECT * FROM user WHERE username=&#x27;$&#123;value&#125;&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    ....<br></code></pre></td></tr></table></figure><p>当 username &#x3D; “‘ OR 1&#x3D;1 OR ‘“ 传入后，${}将变量内容直接和SQL语句进行拼接，结果如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">OR</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>显而易见，上述语句将把整个数据库内容直接暴露出来了</p><p>#{}方式则是先用占位符代替参数将SQL语句先进行<a href="https://zhida.zhihu.com/search?content_id=113073721&content_type=Article&match_order=1&q=%E9%A2%84%E7%BC%96%E8%AF%91&zhida_source=entity">预编译</a>，然后再将参数中的内容替换进来。由于SQL语句已经被预编译过，其SQL意图将无法通过非法的参数内容实现更改，其参数中的内容，无法变为SQL命令的一部分。故，<strong>#{}可以防止SQL注入而${}却不行</strong></p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><h2 id="和-均适用场景"><a href="#和-均适用场景" class="headerlink" title="#{} 和 ${} 均适用场景"></a>#{} 和 ${} 均适用场景</h2><p>由于SQL注入的原因，${}和#{}在都可以使用的场景下，很明显推荐使用#{}。这里除了上文的WHERE语句例子，再介绍一个LIKE模糊查询的场景(username &#x3D; “Amy”):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAddByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>        SELECT * FROM user WHERE username LIKE &#x27;%$&#123;value&#125;%&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该SQL解析为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> username <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%Amy%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>上述通过${}虽然可以实现对包含”Amy”对模糊查询，但是不安全，可以改用#{}，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAddByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>        SELECT * FROM USER WHERE username LIKE CONCAT(&#x27;%&#x27;, #&#123;username&#125;, &#x27;%&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该SQL解析为下文所示，其效果和上文方式一致</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> <span class="hljs-keyword">WHERE</span> username <span class="hljs-keyword">LIKE</span> CONCAT(<span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;Amy&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="只能使用-的场景"><a href="#只能使用-的场景" class="headerlink" title="只能使用${}的场景"></a>只能使用${}的场景</h2><p>由于#{}会给参数内容自动加上引号，会在有些需要表示字段名、表名的场景下，SQL将无法正常执行。现举一例说明：</p><p>期望查询结果按sex字段升序排列，参数String orderCol &#x3D; “sex”,mapper映射文件使用#{}：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAddByName3&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>        SELECT * FROM USER WHERE username LIKE &#x27;%Am%&#x27; ORDER BY #&#123;value&#125; ASC<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>则SQL解析及执行结果如下所示，很明显 ORDER 子句的字段名错误的被加上了引号，致使查询结果没有按期排序输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> <span class="hljs-keyword">WHERE</span> username <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%Am%&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;sex&#x27;</span> <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><p><img src="https://pica.zhimg.com/v2-8422c3a75cc036904ba7e6f3b4a7cb76_1440w.jpg" alt="img"></p><p>这时，现改为${}测试效果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAddByName3&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentResultMap&quot;</span>&gt;</span><br>        SELECT * FROM USER WHERE username LIKE &#x27;%Am%&#x27; ORDER BY $&#123;value&#125; ASC<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>则SQL解析及执行结果如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> <span class="hljs-keyword">WHERE</span> username <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%Am%&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sex <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>${}是Spring框架中使用的占位符，也被称为属性占位符。它用于在配置文件中引用外部属性或配置项的值。例如，可以在Spring配置文件中使用${database.url}来引用数据库连接的URL。这个占位符会在运行时被解析，并替换为实际的属性值。${}占位符通常在Spring的配置文件（如application.properties）中使用。<br>以及：</p><p>还有传map的时候key必须用${}</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原始数据类型不能为null</title>
    <link href="/2025/07/05/%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E4%B8%BAnull/"/>
    <url>/2025/07/05/%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E4%B8%BAnull/</url>
    
    <content type="html"><![CDATA[<p>在 Java 中，<strong>原始数据类型（基本数据类型）不能为 <code>null</code></strong>，这是由 Java 的语言设计和类型系统决定的。以下是详细解释：</p><hr><h3 id="1-基本数据类型与引用类型的区别"><a href="#1-基本数据类型与引用类型的区别" class="headerlink" title="1. 基本数据类型与引用类型的区别"></a><strong>1. 基本数据类型与引用类型的区别</strong></h3><p>Java 的数据类型分为两类：</p><ul><li><p><strong>基本数据类型（Primitive Types）</strong>：<br>包括 <code>int</code>、<code>double</code>、<code>boolean</code> 等，它们是值类型，直接存储具体的数值（如 <code>int</code> 存储整数，<code>boolean</code> 存储 <code>true</code> 或 <code>false</code>）。<br><strong>特点</strong>：</p><ul><li>不能为 <code>null</code>，因为它们的存储单元直接包含值。</li><li>默认值是固定的（例如 <code>int</code> 默认为 <code>0</code>，<code>boolean</code> 默认为 <code>false</code>）。</li></ul></li><li><p><strong>引用类型（Reference Types）</strong>：<br>包括类（如 <code>String</code>）、接口、数组等，它们存储的是对象的引用（内存地址）。<br><strong>特点</strong>：</p><ul><li>可以为 <code>null</code>，表示该引用不指向任何对象。</li></ul></li></ul><hr><h3 id="2-为什么基本类型不能为-null"><a href="#2-为什么基本类型不能为-null" class="headerlink" title="2. 为什么基本类型不能为 null"></a><strong>2. 为什么基本类型不能为 <code>null</code></strong></h3><h4 id="1-内存模型设计"><a href="#1-内存模型设计" class="headerlink" title="(1) 内存模型设计"></a><strong>(1) 内存模型设计</strong></h4><ul><li><strong>基本类型直接存储值</strong>：<br>例如，<code>int a = 5;</code> 中的 <code>a</code> 是一个 4 字节的内存空间，直接存储整数 <code>5</code>，而不是指向某个对象的地址。因此，它无法表示 “无值” 或 <code>null</code>。</li><li><strong>引用类型存储地址</strong>：<br>例如，<code>Integer b = null;</code> 中的 <code>b</code> 是一个 4 字节（32 位 JVM）或 8 字节（64 位 JVM）的内存空间，存储的是对象的地址。<code>null</code> 表示该地址无效（未指向任何对象）。</li></ul><h4 id="2-类型系统的安全性"><a href="#2-类型系统的安全性" class="headerlink" title="(2) 类型系统的安全性"></a><strong>(2) 类型系统的安全性</strong></h4><ul><li><strong>基本类型的意义明确</strong>：<br><code>int</code> 表示整数，<code>boolean</code> 表示布尔值。它们的取值范围是固定的（如 <code>boolean</code> 只能是 <code>true</code> 或 <code>false</code>），没有 “未定义” 的状态。</li><li><strong>引用类型的灵活性</strong>：<br>引用类型可以通过 <code>null</code> 表示 “未初始化” 或 “无效值”，但这也带来了潜在的 <code>NullPointerException</code> 风险。</li></ul><h4 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="(3) 性能优化"></a><strong>(3) 性能优化</strong></h4><ul><li><strong>基本类型的高效性</strong>：<br>基本类型直接存储在栈内存中，访问速度更快。如果允许 <code>null</code>，就需要额外的检查和处理，降低性能。</li><li><strong>引用类型的开销</strong>：<br>引用类型需要分配堆内存，并通过地址访问，天然支持 <code>null</code> 的语义。</li></ul><hr><h3 id="3-典型错误示例"><a href="#3-典型错误示例" class="headerlink" title="3. 典型错误示例"></a><strong>3. 典型错误示例</strong></h3><h4 id="1-错误代码"><a href="#1-错误代码" class="headerlink" title="(1) 错误代码"></a><strong>(1) 错误代码</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 编译错误！</span><br></code></pre></td></tr></table></figure><ul><li><strong>原因</strong>：<code>int</code> 是基本类型，不能存储 <code>null</code>（只能存储整数）。</li><li><strong>正确做法</strong>：使用包装类 <code>Integer</code>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 合法</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-错误比较"><a href="#2-错误比较" class="headerlink" title="(2) 错误比较"></a><strong>(2) 错误比较</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 编译错误！</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>原因</strong>：<code>boolean</code> 是基本类型，不能与 <code>null</code> 比较。</li><li><strong>正确做法</strong>：使用包装类 <code>Boolean</code>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 合法</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="4-如何处理可能为-null-的数值"><a href="#4-如何处理可能为-null-的数值" class="headerlink" title="4. 如何处理可能为 null 的数值"></a><strong>4. 如何处理可能为 <code>null</code> 的数值</strong></h3><p>如果需要表示一个可能为 <code>null</code> 的数值，必须使用基本类型的包装类（如 <code>Integer</code>、<code>Double</code>、<code>Boolean</code>）。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从数据库查询可能为 null 的数值</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> getAgeFromDatabase(); <span class="hljs-comment">// 可能返回 null</span><br><br><span class="hljs-keyword">if</span> (age == <span class="hljs-literal">null</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;年龄未提供&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;年龄为：&quot;</span> + age);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="5-自动装箱与拆箱的陷阱"><a href="#5-自动装箱与拆箱的陷阱" class="headerlink" title="5. 自动装箱与拆箱的陷阱"></a><strong>5. 自动装箱与拆箱的陷阱</strong></h3><p>Java 提供了<strong>自动装箱（Autoboxing）</strong> 和 <strong>拆箱（Unboxing）</strong> 机制，但需注意以下问题：</p><h4 id="1-自动拆箱可能导致-NullPointerException"><a href="#1-自动拆箱可能导致-NullPointerException" class="headerlink" title="(1) 自动拆箱可能导致 NullPointerException"></a><strong>(1) 自动拆箱可能导致 <code>NullPointerException</code></strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> num; <span class="hljs-comment">// 自动拆箱：抛出 NullPointerException</span><br></code></pre></td></tr></table></figure><ul><li><strong>原因</strong>：<code>num</code> 是 <code>null</code>，无法转换为基本类型 <code>int</code>。</li></ul><h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="(2) 解决方法"></a><strong>(2) 解决方法</strong></h4><p>在拆箱前进行 <code>null</code> 检查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (num != <span class="hljs-literal">null</span>) ? num : <span class="hljs-number">0</span>; <span class="hljs-comment">// 安全处理</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-为什么-Java-设计如此？"><a href="#6-为什么-Java-设计如此？" class="headerlink" title="6. 为什么 Java 设计如此？"></a><strong>6. 为什么 Java 设计如此？</strong></h3><ul><li><strong>历史原因</strong>：<br>Java 的设计者（如 James Gosling）希望基本类型具有高性能和明确语义，而引用类型通过 <code>null</code> 提供灵活性。</li><li><strong>安全与效率的权衡</strong>：<br>允许基本类型为 <code>null</code> 会增加运行时检查的开销，且违背其设计初衷（存储固定值）。</li><li><strong>现代改进</strong>：<br>Java 8 引入 <code>Optional&lt;T&gt;</code> 类（如 <code>Optional&lt;Integer&gt;</code>）来更安全地处理可能为 <code>null</code> 的值，减少空指针异常。</li></ul><hr><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a><strong>7. 总结</strong></h3><table><thead><tr><th>特性</th><th>基本类型（如 <code>int</code>）</th><th>引用类型（如 <code>Integer</code>）</th></tr></thead><tbody><tr><td>是否可以为 <code>null</code></td><td>❌ 不可以</td><td>✅ 可以</td></tr><tr><td>存储方式</td><td>直接存储值</td><td>存储对象引用</td></tr><tr><td>默认值</td><td><code>0</code>（<code>int</code>）、<code>false</code>（<code>boolean</code>）</td><td><code>null</code></td></tr><tr><td>适用场景</td><td>高效计算、确定有值的场景</td><td>可能为 <code>null</code> 的场景</td></tr></tbody></table><p>如果需要处理可能为 <code>null</code> 的数值，<strong>请使用包装类或 <code>Optional&lt;T&gt;</code></strong>，并始终进行 <code>null</code> 检查以避免运行时错误。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么使用可重入锁</title>
    <link href="/2025/07/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/"/>
    <url>/2025/07/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>在 Java 并发编程中，<strong>可重入锁（Reentrant Lock）</strong> 是一种核心的同步机制，其设计目的是为了解决多线程环境下资源竞争、死锁等问题，同时提升代码的灵活性和可维护性。以下是 Java 并发编程需要实现可重入锁的详细原因和原理：</p><hr><h3 id="1-为什么需要可重入锁？"><a href="#1-为什么需要可重入锁？" class="headerlink" title="1. 为什么需要可重入锁？"></a><strong>1. 为什么需要可重入锁？</strong></h3><h4 id="1-避免线程因重复请求锁导致的死锁"><a href="#1-避免线程因重复请求锁导致的死锁" class="headerlink" title="(1) 避免线程因重复请求锁导致的死锁"></a><strong>(1) 避免线程因重复请求锁导致的死锁</strong></h4><ul><li><strong>问题场景</strong>：<br>如果一个线程在持有锁的情况下再次请求同一把锁，且锁不支持可重入性，线程会因为无法获取锁而阻塞，最终导致<strong>死锁</strong>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-comment">// 递归调用</span><br>            recursiveIncrement();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recursiveIncrement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-comment">// 如果锁不可重入，这里会死锁！</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>问题</strong>：<code>increment()</code> 方法内部调用 <code>recursiveIncrement()</code>，而两者都使用 <code>synchronized(lock)</code>，如果锁不可重入，线程会在 <code>recursiveIncrement()</code> 中尝试获取已经持有的锁时被阻塞，从而卡死。</li><li><strong>解决方案</strong>：可重入锁允许线程在持有锁的情况下多次获取同一把锁，避免死锁。</li></ul></li></ul><h4 id="2-支持嵌套同步方法调用"><a href="#2-支持嵌套同步方法调用" class="headerlink" title="(2) 支持嵌套同步方法调用"></a><strong>(2) 支持嵌套同步方法调用</strong></h4><ul><li><strong>典型场景</strong>：<br>在继承关系中，子类的同步方法调用父类的同步方法时，若锁不可重入，会导致线程无法进入父类方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.doSomething(); <span class="hljs-comment">// 如果锁不可重入，会死锁！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>问题</strong>：<code>Child</code> 的 <code>doSomething()</code> 方法调用了 <code>Parent</code> 的 <code>doSomething()</code>，两者都使用内置锁（<code>synchronized</code>）。若锁不可重入，线程会因无法再次获取锁而卡死。</li><li><strong>解决方案</strong>：Java 的 <code>synchronized</code> 锁和 <code>ReentrantLock</code> 都是可重入的，允许这种嵌套调用。</li></ul></li></ul><h4 id="3-提升代码的封装性和灵活性"><a href="#3-提升代码的封装性和灵活性" class="headerlink" title="(3) 提升代码的封装性和灵活性"></a><strong>(3) 提升代码的封装性和灵活性</strong></h4><ul><li><strong>优势</strong>：<br>可重入锁允许开发者将同步逻辑封装在多个方法中，而无需担心线程因重复请求锁导致的死锁问题。这简化了并发代码的设计和维护。</li></ul><hr><h3 id="2-可重入锁的实现原理"><a href="#2-可重入锁的实现原理" class="headerlink" title="2. 可重入锁的实现原理"></a><strong>2. 可重入锁的实现原理</strong></h3><p>Java 的可重入锁（如 <code>ReentrantLock</code> 和 <code>synchronized</code>）通过 <strong>计数器（State）和持有线程</strong> 实现可重入性：</p><ol><li><strong>计数器机制</strong>：<ul><li>每个锁关联一个计数器（<code>state</code>）和一个持有线程。</li><li><strong>首次获取锁</strong>：计数器从 <code>0</code> 增加到 <code>1</code>，线程成为锁的持有者。</li><li><strong>重入获取锁</strong>：计数器递增（如 <code>state++</code>）。</li><li><strong>释放锁</strong>：计数器递减（如 <code>state--</code>），当计数器为 <code>0</code> 时，锁被完全释放，其他线程可以竞争。</li></ul></li><li><strong>线程检查机制</strong>：<ul><li>当线程尝试获取锁时，会检查当前线程是否是锁的持有者。</li><li><strong>如果是</strong>：允许重入，并增加计数器。</li><li><strong>如果不是</strong>：阻塞线程，加入等待队列。</li></ul></li></ol><h4 id="1-ReentrantLock-的实现"><a href="#1-ReentrantLock-的实现" class="headerlink" title="(1) ReentrantLock 的实现"></a><strong>(1) <code>ReentrantLock</code> 的实现</strong></h4><ul><li><strong>基于 AQS（AbstractQueuedSynchronizer）</strong>：<ul><li><code>ReentrantLock</code> 使用 AQS 的 <code>state</code> 字段记录锁的重入次数。</li><li><strong>获取锁</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (当前线程是持有者) &#123;<br>    state += <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    CAS 尝试将 state 从 <span class="hljs-number">0</span> 改为 <span class="hljs-number">1</span>；<br>    如果成功，线程成为持有者；<br>    否则，阻塞线程并加入等待队列。<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>释放锁</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">state -= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (state == <span class="hljs-number">0</span>) &#123;<br>    唤醒等待队列中的线程；<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-synchronized-的实现"><a href="#2-synchronized-的实现" class="headerlink" title="(2) synchronized 的实现"></a><strong>(2) <code>synchronized</code> 的实现</strong></h4><ul><li><strong>JVM 内置的可重入锁</strong>：<ul><li>每个对象都有一个关联的监视器锁（Monitor Lock）。</li><li><strong>计数器</strong>：JVM 为每个锁维护一个计数器，记录当前线程持有锁的次数。</li><li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outerMethod</span><span class="hljs-params">()</span> &#123;<br>    innerMethod(); <span class="hljs-comment">// 调用另一个 synchronized 方法</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">innerMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 可重入：同一线程可再次获取锁</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="3-可重入锁的优势"><a href="#3-可重入锁的优势" class="headerlink" title="3. 可重入锁的优势"></a><strong>3. 可重入锁的优势</strong></h3><h4 id="1-避免死锁"><a href="#1-避免死锁" class="headerlink" title="(1) 避免死锁"></a><strong>(1) 避免死锁</strong></h4><ul><li>允许线程在持有锁的情况下再次获取同一把锁，避免因重复请求锁导致的死锁。</li></ul><h4 id="2-支持递归调用"><a href="#2-支持递归调用" class="headerlink" title="(2) 支持递归调用"></a><strong>(2) 支持递归调用</strong></h4><ul><li>适用于递归函数、嵌套同步方法等场景。</li></ul><h4 id="3-提高代码灵活性"><a href="#3-提高代码灵活性" class="headerlink" title="(3) 提高代码灵活性"></a><strong>(3) 提高代码灵活性</strong></h4><ul><li>可重入锁（如 <code>ReentrantLock</code>）比 <code>synchronized</code> 更灵活，支持：<ul><li><strong>公平锁&#x2F;非公平锁</strong>：公平锁按等待顺序分配锁，避免线程饥饿。</li><li><strong>尝试获取锁</strong>：通过 <code>tryLock()</code> 方法尝试获取锁，避免无限阻塞。</li><li><strong>超时获取锁</strong>：通过 <code>tryLock(timeout, unit)</code> 设置超时时间。</li><li><strong>中断响应</strong>：通过 <code>lockInterruptibly()</code> 支持中断操作。</li></ul></li></ul><hr><h3 id="4-可重入锁的应用场景"><a href="#4-可重入锁的应用场景" class="headerlink" title="4. 可重入锁的应用场景"></a><strong>4. 可重入锁的应用场景</strong></h3><h4 id="1-递归函数"><a href="#1-递归函数" class="headerlink" title="(1) 递归函数"></a><strong>(1) 递归函数</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            count++;<br>            <span class="hljs-keyword">if</span> (depth &gt; <span class="hljs-number">0</span>) &#123;<br>                increment(depth - <span class="hljs-number">1</span>); <span class="hljs-comment">// 递归调用</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>关键</strong>：线程在递归调用中多次获取同一把锁，不会被阻塞。</li></ul><h4 id="2-父类与子类的同步方法调用"><a href="#2-父类与子类的同步方法调用" class="headerlink" title="(2) 父类与子类的同步方法调用"></a><strong>(2) 父类与子类的同步方法调用</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.doSomething(); <span class="hljs-comment">// 可重入：同一线程可再次获取锁</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-复杂的业务逻辑"><a href="#3-复杂的业务逻辑" class="headerlink" title="(3) 复杂的业务逻辑"></a><strong>(3) 复杂的业务逻辑</strong></h4><ul><li>在业务逻辑中，多个方法可能需要共享同一把锁，而无需担心死锁问题。</li></ul><hr><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a><strong>5. 注意事项</strong></h3><h4 id="1-可重入锁不能完全避免死锁"><a href="#1-可重入锁不能完全避免死锁" class="headerlink" title="(1) 可重入锁不能完全避免死锁"></a><strong>(1) 可重入锁不能完全避免死锁</strong></h4><ul><li><strong>死锁的根本原因是循环依赖</strong>，例如多个线程互相持有对方需要的锁。可重入锁只能避免<strong>同一线程因重复请求锁导致的死锁</strong>，但无法解决<strong>多线程间的死锁</strong>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread1: lockA -&gt; lockB  <br>Thread2: lockB -&gt; lockA<br></code></pre></td></tr></table></figure><ul><li><strong>解决方案</strong>：遵循统一的锁获取顺序，或使用工具分析死锁。</li></ul></li></ul><h4 id="2-避免过度依赖可重入性"><a href="#2-避免过度依赖可重入性" class="headerlink" title="(2) 避免过度依赖可重入性"></a><strong>(2) 避免过度依赖可重入性</strong></h4><ul><li>过度依赖可重入性可能导致代码逻辑复杂，建议在必要时使用。</li></ul><h4 id="3-性能权衡"><a href="#3-性能权衡" class="headerlink" title="(3) 性能权衡"></a><strong>(3) 性能权衡</strong></h4><ul><li><strong>公平锁</strong>：性能较低，但避免线程饥饿。</li><li><strong>非公平锁</strong>：性能较高，但可能导致某些线程长时间等待。</li></ul><hr><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>可重入锁</strong></th></tr></thead><tbody><tr><td><strong>核心目的</strong></td><td>避免线程因重复请求锁导致的死锁，支持嵌套同步方法调用</td></tr><tr><td><strong>实现机制</strong></td><td>计数器（State） + 持有线程检查</td></tr><tr><td><strong>典型实现</strong></td><td><code>ReentrantLock</code>（显式锁）、<code>synchronized</code>（内置锁）</td></tr><tr><td><strong>优势</strong></td><td>避免死锁、支持递归&#x2F;嵌套调用、灵活控制锁行为</td></tr><tr><td><strong>适用场景</strong></td><td>递归函数、父子类同步方法、复杂的业务逻辑</td></tr><tr><td><strong>注意事项</strong></td><td>不能完全避免死锁、需合理设计锁的获取顺序、性能权衡</td></tr></tbody></table><p>通过可重入锁，Java 并发编程能够在复杂场景下保持代码的简洁性和安全性，是多线程开发中不可或缺的工具。</p>]]></content>
    
    
    
    <tags>
      
      <tag>并发编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可重入锁的引入：不可重入锁中的死锁问题</title>
    <link href="/2025/07/05/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E7%9A%84%E5%BC%95%E5%85%A5%EF%BC%9A%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E4%B8%AD%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/"/>
    <url>/2025/07/05/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E7%9A%84%E5%BC%95%E5%85%A5%EF%BC%9A%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E4%B8%AD%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>重入锁（ReentrantLock）</strong>，顾名思义，就是支持重复进入的锁，它表示该锁能够支持同一个线程对一个资源的重复加锁。也就是说，如果某个线程试图获得一个已经由它自己持有的可重入锁，那个这个请求就会成功。</p><p>相反，<strong>不可重入锁</strong>就是指该锁不支持同一个线程对一个资源的重复加锁，由于 Java 中并没有现成的可重入锁可供使用，下面简单实现一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonReentrantLock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isLocked</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">while</span> (isLocked) &#123;<br>            wait();<br>        &#125;<br>        isLocked = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        isLocked = <span class="hljs-literal">false</span>;<br>        notify();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，isLocked 变量用于表示锁是否被占用的标志，lock 和 unlock 方法都是同步方法，确保在多线程环境下只有一个线程可以获得&#x2F;释放锁，当锁已经被占用时，线程将通过调用在 while 循环中调用 wait 方法进行等待，直到锁被释放。</p><p><strong>之后，我们再来看一个「不可重入锁中的死锁问题」：</strong></p><p>下面是一个 Parent 类，它包含了一个不可重入锁 nonReentrantLock 和一个 method 方法 。在 method 方法中使用不可重入锁加锁，并且打印一条语句，之后在 finally 块中释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">NonReentrantLock</span> <span class="hljs-variable">nonReentrantLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        nonReentrantLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Parent method&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            nonReentrantLock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在有一个 Child 类，它继承自 Parent ，并覆盖了 method 方法，并且也在其中使用了不可重入锁进行加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        nonReentrantLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Child method&quot;</span>);<br>            <span class="hljs-built_in">super</span>.method();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            nonReentrantLock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面编写测试类进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Child</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>();<br>        child.method();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><p>![屏幕截图 2025-07-05 161102](..\img\屏幕截图 2025-07-05 161102.png)</p><p>可以看到，程序只显示了 Child 类的打印语句，并且一直在运行，说明发生了死锁。</p><p><strong>分析：</strong></p><p>由于 Child 和 Parent 类中的 method 方法执行时都需要先加锁，即每个 method 方法在执行前都会获取 Parent 中的 nonReentrantLock 锁。</p><p>当程序运行到 Child 类的 <code>super.method()</code> 时，因为 nonReentrantLock 锁是不可重入锁，且线程在调用 <code>child.method()</code> 时已经持有了这个锁，所以线程会在此时永远停顿下去，等待一个永远也无法获得的锁。进而发生死锁。</p><p><strong>解决：</strong></p><p>想要解决这个问题非常简单：使用可重入锁。例如使用 ReentrantLock ，或者仅使用 synchronized 关键字修饰两个类的 method 方法即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>并发编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode：删除链表的倒数第N个节点</title>
    <link href="/2025/07/03/leetcode%EF%BC%9A%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <url>/2025/07/03/leetcode%EF%BC%9A%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="s双指针"><a href="#s双指针" class="headerlink" title="s双指针"></a>s双指针</h2><p>想象有一把长度固定的尺子，左端点在链表头部，右端点在正数第 n 个节点。向右移动尺子，当尺子右端点到达链表末尾时，左端点就在倒数第 n 个节点。</p><p>由于需要删除节点，我们需要找倒数第 n 个节点的前一个节点（倒数第 n+1 个节点），这样才能做删除操作。</p><p>修改：左端点在链表头部，右端点在正数第 n+1 个节点。向右移动尺子，当尺子右端点到达链表末尾时，左端点就在倒数第 n+1 个节点。</p><p>细节：如果 n 等于链表长度呢？没有正数第 n+1 个节点。难道要特判这种情况？</p><p>不需要。我们可以在头节点的前面插入一个哨兵节点（dummy node），把它当作链表的头节点，这样就有正数第 n+1 个节点了。换句话说，如果遇到需要删除头节点的题目，添加哨兵节点可以简化代码逻辑，请记住这个技巧。</p><p>具体请看视频讲解：【基础算法精讲 08】，制作不易，欢迎点赞关注~</p><p>答疑<br>问：前后指针的做法为什么算作「一次遍历」？链表节点不是会被遍历两次吗？</p><p>答：链表节点是会被遍历两次。其实我觉得这题本质上想考察的是，在不知道链表长度的前提下，设计一个算法，在「到达链表末尾的瞬间」就能知道倒数第 n 个节点。</p><p>问：一般在做链表题时，什么时候要写 while node，什么时候要写 while node.next？</p><p>答：如果要遍历到最后一个节点，需要写 while node；如果要遍历到倒数第二个节点，需要写 while node.next。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 由于可能会删除链表头部，用哨兵节点简化代码</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">while</span> (n-- &gt; <span class="hljs-number">0</span>) &#123;<br>            right = right.next; <span class="hljs-comment">// 右指针先向右走 n 步</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> (right.next != <span class="hljs-literal">null</span>) &#123;<br>            left = left.next;<br>            right = right.next; <span class="hljs-comment">// 左右指针一起走</span><br>        &#125;<br>        left.next = left.next.next; <span class="hljs-comment">// 左指针的下一个节点就是倒数第 n 个节点</span><br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要解决“从链表末尾删除第 n 个节点”的问题，并且要求使用 <strong>反转两次链表</strong> 的方法，我们可以按照以下步骤进行：</p><hr><h3 id="✅-解题思路"><a href="#✅-解题思路" class="headerlink" title="✅ 解题思路"></a>✅ 解题思路</h3><ol><li><strong>第一次反转链表</strong><br> 将原链表反转。这样，原链表的<strong>倒数第 n 个节点</strong>就变成了<strong>正数第 n 个节点</strong>。</li><li><strong>删除反转后的第 n 个节点</strong><br> 利用哑节点（dummy node）处理头节点被删除的情况，确保删除操作不会出错。</li><li><strong>第二次反转链表</strong><br> 再次反转链表，将删除后的链表还原回原来的顺序。</li></ol><hr><h3 id="🧠-关键点说明"><a href="#🧠-关键点说明" class="headerlink" title="🧠 关键点说明"></a>🧠 关键点说明</h3><ul><li><strong>为什么反转两次？</strong><br> 反转链表后，原本难以定位的倒数第 n 个节点就变成了易于访问的正数第 n 个节点。删除后，再反转回来即可得到最终结果。</li><li><strong>如何删除第 n 个节点？</strong><br> 使用哑节点 <code>dummy</code> 来统一处理头节点被删除的情况，然后通过移动指针找到第 n 个节点并删除。</li><li><strong>反转链表的标准写法</strong><br> 反转链表时必须确保每个节点都被处理，因此循环条件应为 <code>cur != null</code>，而不是 <code>cur.next != null</code>。</li></ul><hr><h3 id="🧩-示例代码（Java）"><a href="#🧩-示例代码（Java）" class="headerlink" title="🧩 示例代码（Java）"></a>🧩 示例代码（Java）</h3><p>java</p><p>深色版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 第一步：反转链表</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">reversedHead</span> <span class="hljs-operator">=</span> reverseList(head);<br>        <br>        <span class="hljs-comment">// 第二步：删除反转后的链表中第n个节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        dummy.next = reversedHead;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> reversedHead;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span> &amp;&amp; current != <span class="hljs-literal">null</span>; i++) &#123;<br>            prev = prev.next;<br>            current = current.next;<br>        &#125;<br><br>        <span class="hljs-comment">// 删除第n个节点</span><br>        prev.next = current.next;<br><br>        <span class="hljs-comment">// 第三步：再次反转链表，恢复原顺序</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> reverseList(dummy.next);<br><br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">nxt</span> <span class="hljs-operator">=</span> cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = nxt;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="🧪-示例说明"><a href="#🧪-示例说明" class="headerlink" title="🧪 示例说明"></a>🧪 示例说明</h3><p>假设输入链表为 <code>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</code>，<code>n = 2</code>：</p><ol><li><strong>第一次反转</strong>：链表变成 <code>5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1</code>。</li><li><strong>删除第2个节点</strong>：删除 <code>4</code>，得到 <code>5 -&gt; 3 -&gt; 2 -&gt; 1</code>。</li><li><strong>第二次反转</strong>：链表还原为 <code>1 -&gt; 2 -&gt; 3 -&gt; 5</code>。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode：k个一组链表倒转</title>
    <link href="/2025/06/28/leetcode%EF%BC%9Ak%E4%B8%AA%E4%B8%80%E7%BB%84%E9%93%BE%E8%A1%A8%E5%80%92%E8%BD%AC/"/>
    <url>/2025/06/28/leetcode%EF%BC%9Ak%E4%B8%AA%E4%B8%80%E7%BB%84%E9%93%BE%E8%A1%A8%E5%80%92%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg" alt="img"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">2</span><br>输出：<span class="hljs-string">[2,1,4,3,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg" alt="img"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">[3,2,1,4,5]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中的节点数目为 <code>n</code></li><li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><p>出自0x3f:<a href="https://www.bilibili.com/video/BV1sd4y1x7KN/?vd_source=e9af65243db3099fe9a2f826325febdd">反转链表【基础算法精讲 06】_哔哩哔哩_bilibili</a></p><p><img src="/..%5Cimg%5Cimage-20250628093741061.png" alt="image-20250628093741061"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-comment">// 统计节点个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head; cur != <span class="hljs-literal">null</span>; cur = cur.next) &#123;<br>            n++;<br>        &#125;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p0</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br><br>        <span class="hljs-comment">// k 个一组处理</span><br>        <span class="hljs-keyword">for</span> (; n &gt;= k; n -= k) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123; <span class="hljs-comment">// 同 92 题</span><br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">nxt</span> <span class="hljs-operator">=</span> cur.next;<br>                cur.next = pre; <span class="hljs-comment">// 每次循环只修改一个 next，方便大家理解</span><br>                pre = cur;<br>                cur = nxt;<br>            &#125;<br><br>            <span class="hljs-comment">// 见视频</span><br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">nxt</span> <span class="hljs-operator">=</span> p0.next;<br>            p0.next.next = cur;<br>            p0.next = pre;<br>            p0 = nxt;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br><br>作者：灵茶山艾府<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/reverse-nodes-in-k-group/solutions/1992228/you-xie-cuo-liao-yi-ge-shi-pin-jiang-tou-plfs/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode：链表倒转</title>
    <link href="/2025/06/28/leetcode%EF%BC%9A%E9%93%BE%E8%A1%A8%E5%80%92%E8%BD%AC/"/>
    <url>/2025/06/28/leetcode%EF%BC%9A%E9%93%BE%E8%A1%A8%E5%80%92%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="92-反转链表2"><a href="#92-反转链表2" class="headerlink" title="92.反转链表2"></a>92.反转链表2</h1><p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 <strong>反转后的链表</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg" alt="img"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：head = <span class="hljs-selector-attr">[1,2,3,4,5]</span>, <span class="hljs-attribute">left</span> = <span class="hljs-number">2</span>, right = <span class="hljs-number">4</span><br>输出：<span class="hljs-selector-attr">[1,4,3,2,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：head = <span class="hljs-selector-attr">[5]</span>, <span class="hljs-attribute">left</span> = <span class="hljs-number">1</span>, right = <span class="hljs-number">1</span><br>输出：<span class="hljs-selector-attr">[5]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目为 <code>n</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>-500 &lt;= Node.val &lt;= 500</code></li><li><code>1 &lt;= left &lt;= right &lt;= n</code></li></ul><p>0x3f：</p><p>关键性质：</p><p>![屏幕截图 2025-06-28 091618](..\img\屏幕截图 2025-06-28 091618.png)</p><p>将内部的倒转之后，还需要处理![屏幕截图 2025-06-28 091811](..\img\屏幕截图 2025-06-28 091811.png)两端的节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">p0.next.next = curr;<br>p0.next = pre;<br></code></pre></td></tr></table></figure><p>如果left &#x3D;1；如何解决？</p><p>注意：题目给出的是无头结点的链表，因此我们可以认为给他多设置一个链表头节点：</p><p><img src="/..%5Cimg%5Cimage-20250628092446549.png" alt="image-20250628092446549"></p><p>p0节点不参与，先处理下方的p0的next的next，再处理p0的next</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        ListNode p0=dummy; <span class="hljs-comment">//head节点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;left-<span class="hljs-number">1</span>;i++)&#123;<br>            p0 =p0.next;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span>p0.next;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;right-left+<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">nxt</span> <span class="hljs-operator">=</span>curr.next; <span class="hljs-comment">//内部反转</span><br>            curr.next = pre;<br>            pre = curr;<br>            curr = nxt;<br>        &#125;<br>        p0.next.next = curr; <span class="hljs-comment">//先处理内部的头节点，使其指向外部2号的头</span><br>        <span class="hljs-comment">//先处理next的next，否则next就失踪了</span><br>        p0.next = pre; <span class="hljs-comment">//处理p0（外部1号）的头</span><br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/06/27/Git%E4%B8%8EGitLab%E7%9A%84%E4%BC%81%E4%B8%9A%E5%AE%9E%E6%88%98/"/>
    <url>/2025/06/27/Git%E4%B8%8EGitLab%E7%9A%84%E4%BC%81%E4%B8%9A%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Git与GitLab的企业实战"><a href="#Git与GitLab的企业实战" class="headerlink" title="Git与GitLab的企业实战"></a>Git与GitLab的企业实战</h1><h1 id="第1章-Git概述"><a href="#第1章-Git概述" class="headerlink" title="第1章 Git概述"></a>第1章 Git概述</h1><p>Git是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。</p><p>Git易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。其性能优于Subversion(svn)、CVS、Perforce和ClearCase等版本控制工具。</p><h2 id="1-何为版本控制"><a href="#1-何为版本控制" class="headerlink" title="1. 何为版本控制"></a>1. 何为版本控制</h2><p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</p><p>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。</p><p><img src="/..%5Cimg%5Cwps1.jpg" alt="img"> </p><h2 id="2-为什么需要版本控制"><a href="#2-为什么需要版本控制" class="headerlink" title="2. 为什么需要版本控制"></a>2. 为什么需要版本控制</h2><p>个人开发过渡到团队协作。</p><p><img src="/..%5Cimg%5Cwps2.jpg" alt="img"> </p><h2 id="3-版本控制工具"><a href="#3-版本控制工具" class="headerlink" title="3. 版本控制工具"></a>3. 版本控制工具</h2><ul><li><strong>集中式版本控制工具</strong></li></ul><p>CVS、SVN(Subversion)、VSS……</p><p>集中化的版本控制系统诸如 CVS、SVN等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</p><p>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</p><p>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</p><p><img src="/..%5Cimg%5Cwps3.jpg" alt="img"> </p><ul><li><strong>分布式版本控制工具</strong></li></ul><p>Git、Mercurial、Bazaar、Darcs……</p><p>像 Git这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。</p><p>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷:</p><ol><li><p>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</p></li><li><p>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</p></li></ol><p><img src="/..%5Cimg%5Cwps4.png" alt="img"> </p><h2 id="4-Git简史"><a href="#4-Git简史" class="headerlink" title="4. Git简史"></a>4. Git简史</h2><p><img src="/..%5Cimg%5Cwps5.jpg" alt="img"> </p><h2 id="5-Git工作机制"><a href="#5-Git工作机制" class="headerlink" title="5 Git工作机制"></a>5 Git工作机制</h2><p><img src="/..%5Cimg%5Cwps6.jpg" alt="img"> </p><h2 id="6-Git和代码托管中心"><a href="#6-Git和代码托管中心" class="headerlink" title="6 Git和代码托管中心"></a>6 Git和代码托管中心</h2><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。</p><ul><li><strong>局域网</strong></li></ul><p>GitLab</p><ul><li><strong>互联网</strong></li></ul><p>GitHub（外网）</p><p>Gitee码云（国内网站）</p><h1 id="第2章-Git安装"><a href="#第2章-Git安装" class="headerlink" title="第2章 Git安装"></a>第2章 Git安装</h1><p>​官网地址： <a href="https://git-scm.com/%E6%88%96https://github.com/git-for-windows/git/releases">https://git-scm.com/或https://github.com/git-for-windows/git/releases</a> </p><p>​查看GNU协议，可以直接点击下一步。</p><p><img src="/..%5Cimg%5Cwps7.jpg" alt="img"> </p><p>选择Git安装位置，要求是非中文并且没有空格的目录，然后下一步。</p><p><img src="/..%5Cimg%5Cwps8.jpg" alt="img"> </p><p>Git选项配置，推荐默认设置，然后下一步。</p><p><img src="/..%5Cimg%5Cwps9.jpg" alt="img"> </p><p>Git安装目录名，不用修改，直接点击下一步。</p><p><img src="/..%5Cimg%5Cwps10.jpg" alt="img"> </p><p>Git的默认编辑器，建议使用默认的Vim编辑器，然后点击下一步。</p><p><img src="/..%5Cimg%5Cwps11.jpg" alt="img"> </p><p>默认分支名设置，选择让Git决定，分支名默认为master，下一步。 </p><p><img src="/..%5Cimg%5Cwps12.jpg" alt="img"> </p><p>修改Git的环境变量，选第一个，不修改环境变量，只在Git Bash里使用Git。 </p><p><img src="/..%5Cimg%5Cwps13.jpg" alt="img"> </p><p>选择后台客户端连接协议，选默认值OpenSSL，然后下一步。 </p><p><img src="/..%5Cimg%5Cwps14.jpg" alt="img"> </p><p>配置Git文件的行末换行符，Windows使用CRLF，Linux使用LF，选择第一个自动转换，然后继续下一步。 </p><p><img src="/..%5Cimg%5Cwps15.jpg" alt="img"> </p><p>选择Git终端类型，选择默认的Git Bash终端，然后继续下一步。</p><p><img src="/..%5Cimg%5Cwps16.jpg" alt="img"> </p><p>选择Git pull合并的模式，选择默认，然后下一步。</p><p><img src="/..%5Cimg%5Cwps17.jpg" alt="img"> </p><p>选择Git的凭据管理器，选择默认的跨平台的凭据管理器，然后下一步。</p><p><img src="/..%5Cimg%5Cwps18.jpg" alt="img"> </p><p>其他配置，选择默认设置，然后下一步。</p><p><img src="/..%5Cimg%5Cwps19.jpg" alt="img"> </p><p>实验室功能，技术还不成熟，有已知的bug，不要勾选，然后点击右下角的Install按钮，开始安装Git。</p><p><img src="/..%5Cimg%5Cwps20.jpg" alt="img"> </p><p>点击Finsh按钮，Git安装成功！</p><p><img src="/..%5Cimg%5Cwps21.jpg" alt="img"> </p><p>右键任意位置，在右键菜单里选择Git Bash Here即可打开Git Bash命令行终端。</p><p><img src="/..%5Cimg%5Cwps22.jpg" alt="img"> </p><p>在Git Bash终端里输入git –version查看git版本，如图所示，说明Git安装成功。</p><p><img src="/..%5Cimg..%5Cimg-20230627170844640.png" alt="..\img-20230627170844640"> </p><h1 id="第3章-Git常用命令"><a href="#第3章-Git常用命令" class="headerlink" title="第3章 Git常用命令"></a>第3章 Git常用命令</h1><table><thead><tr><th><strong>命令名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户邮箱</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h2 id="1-设置用户签名"><a href="#1-设置用户签名" class="headerlink" title="1 设置用户签名"></a>1 设置用户签名</h2><h3 id="1-1-基本语法"><a href="#1-1-基本语法" class="headerlink" title="1.1 基本语法"></a>1.1 基本语法</h3><p>git config –global user.name 用户名</p><p>git config –global user.email 邮箱</p><h3 id="1-2-案例实操"><a href="#1-2-案例实操" class="headerlink" title="1.2 案例实操"></a>1.2 案例实操</h3><p>全局范围的签名设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name yhm<br>git config --global user.email yaohm7788@163.com<br>git config --list # 查看全局配置<br>cat ~/.gitconfig  # cat linux中查看文本的命令  ~ 家 [你当前用户的家]/ .gitconfig<br></code></pre></td></tr></table></figure><p>说明：</p><p>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git首次安装必须设置一下用户签名，否则无法提交代码。</p><p>※注意：这里设置用户签名和将来登录GitHub（或其他代码托管中心）的账号没有任何关系。</p><h2 id="2-初始化本地库"><a href="#2-初始化本地库" class="headerlink" title="2 初始化本地库"></a><strong>2</strong> <strong>初始化本地库</strong></h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p><strong>git init</strong></p><h3 id="2-2-案例实操"><a href="#2-2-案例实操" class="headerlink" title="2.2 案例实操"></a>2.2 案例实操</h3><p><img src="/..%5Cimg..%5Cimg-20230627131721466.png" alt="..\img-20230627131721466"></p><p>结果查看</p><p><img src="/..%5Cimg..%5Cimg-20230627131804454.png" alt="..\img-20230627131804454"> </p><h2 id="3-查看本地库状态"><a href="#3-查看本地库状态" class="headerlink" title="3 查看本地库状态"></a><strong>3</strong> <strong>查看本地库状态</strong></h2><h3 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1 基本语法"></a>3.1 基本语法</h3><p><strong>git status</strong></p><h3 id="3-2-案例实操"><a href="#3-2-案例实操" class="headerlink" title="3.2 案例实操"></a>3.2 案例实操</h3><h4 id="（1）首次查看（工作区没有文件）"><a href="#（1）首次查看（工作区没有文件）" class="headerlink" title="（1）首次查看（工作区没有文件）"></a>（1）首次查看（工作区没有文件）</h4><p><img src="/..%5Cimg..%5Cimg-20230627132109306.png" alt="..\img-20230627132109306"></p><h4 id="（2）新增文件"><a href="#（2）新增文件" class="headerlink" title="（2）新增文件"></a>（2）新增文件</h4><p><img src="/..%5Cimg..%5Cimg-20230627132215734.png" alt="..\img-20230627132215734"></p><p><img src="/..%5Cimg..%5Cimg-20230627132317963.png" alt="..\img-20230627132317963"></p><h4 id="（3）再次查看（检测到未追踪文件）"><a href="#（3）再次查看（检测到未追踪文件）" class="headerlink" title="（3）再次查看（检测到未追踪文件）"></a>（3）再次查看（检测到未追踪文件）</h4><p><img src="/..%5Cimg..%5Cimg-20230627132547573.png" alt="..\img-20230627132547573"></p><h2 id="4-添加暂存区"><a href="#4-添加暂存区" class="headerlink" title="4 添加暂存区"></a>4 添加暂存区</h2><h3 id="4-1-将工作区的文件添加到暂存区"><a href="#4-1-将工作区的文件添加到暂存区" class="headerlink" title="4.1 将工作区的文件添加到暂存区"></a>4.1 将工作区的文件添加到暂存区</h3><h4 id="（1）基本语法"><a href="#（1）基本语法" class="headerlink" title="（1）基本语法"></a>（1）基本语法</h4><p><strong>git</strong> <strong>add</strong> <strong>文件名</strong></p><h4 id="（2）案例实操"><a href="#（2）案例实操" class="headerlink" title="（2）案例实操"></a>（2）案例实操</h4><p><img src="/..%5Cimg..%5Cimg-20230627132954523.png" alt="..\img-20230627132954523"></p><h3 id="4-2-查看状态（检测到暂存区有新文件）"><a href="#4-2-查看状态（检测到暂存区有新文件）" class="headerlink" title="4.2 查看状态（检测到暂存区有新文件）"></a>4.2 查看状态（检测到暂存区有新文件）</h3><p><img src="/..%5Cimg..%5Cimg-20230627133040699.png" alt="..\img-20230627133040699"></p><h2 id="5-提交本地库"><a href="#5-提交本地库" class="headerlink" title="5 提交本地库"></a>5 提交本地库</h2><h3 id="5-1-暂存区文件提交到本地库"><a href="#5-1-暂存区文件提交到本地库" class="headerlink" title="5.1 暂存区文件提交到本地库"></a>5.1 暂存区文件提交到本地库</h3><h4 id="（1）基本语法-1"><a href="#（1）基本语法-1" class="headerlink" title="（1）基本语法"></a>（1）基本语法</h4><p><strong>git commit -m “日志信息” 文件名</strong></p><h4 id="（2）案例实操-1"><a href="#（2）案例实操-1" class="headerlink" title="（2）案例实操"></a>（2）案例实操</h4><p><img src="/..%5Cimg..%5Cimg-20230627133335748.png" alt="..\img-20230627133335748"></p><h3 id="5-2-查看状态（没有文件需要提交）"><a href="#5-2-查看状态（没有文件需要提交）" class="headerlink" title="5.2 查看状态（没有文件需要提交）"></a>5.2 查看状态（没有文件需要提交）</h3><p><img src="/..%5Cimg..%5Cimg-20230627133425162.png" alt="..\img-20230627133425162"></p><h2 id="6-修改文件（hello-txt）"><a href="#6-修改文件（hello-txt）" class="headerlink" title="6 修改文件（hello.txt）"></a>6 修改文件（hello.txt）</h2><h3 id="6-1-查看状态（检测到工作区有文件被修改）"><a href="#6-1-查看状态（检测到工作区有文件被修改）" class="headerlink" title="6.1 查看状态（检测到工作区有文件被修改）"></a>6.1 查看状态（检测到工作区有文件被修改）</h3><p><img src="/..%5Cimg..%5Cimg-20230627133644105.png" alt="..\img-20230627133644105"></p><h3 id="6-2-将修改的文件再次添加暂存区"><a href="#6-2-将修改的文件再次添加暂存区" class="headerlink" title="6.2 将修改的文件再次添加暂存区"></a>6.2 将修改的文件再次添加暂存区</h3><p><img src="/..%5Cimg..%5Cimg-20230627133907417.png" alt="..\img-20230627133907417"></p><h3 id="6-3-查看状态（工作区的修改添加到了暂存区）"><a href="#6-3-查看状态（工作区的修改添加到了暂存区）" class="headerlink" title="6.3 查看状态（工作区的修改添加到了暂存区）"></a>6.3 查看状态（工作区的修改添加到了暂存区）</h3><p><img src="/..%5Cimg..%5Cimg-20230627133937432.png" alt="..\img-20230627133937432"></p><h3 id="6-4-将暂存区文件提交到本地库"><a href="#6-4-将暂存区文件提交到本地库" class="headerlink" title="6.4 将暂存区文件提交到本地库"></a>6.4 将暂存区文件提交到本地库</h3><p><img src="/..%5Cimg..%5Cimg-20230627134046013.png" alt="..\img-20230627134046013"></p><h2 id="7-历史版本"><a href="#7-历史版本" class="headerlink" title="7 历史版本"></a>7 历史版本</h2><h3 id="7-1-查看历史版本"><a href="#7-1-查看历史版本" class="headerlink" title="7.1 查看历史版本"></a>7.1 查看历史版本</h3><h4 id="（1）基本语法-2"><a href="#（1）基本语法-2" class="headerlink" title="（1）基本语法"></a>（1）基本语法</h4><p><strong>git reflog</strong>  <strong>查看版本信息</strong></p><p>git reflog -n 数量</p><p><strong>git log</strong>  <strong>查看版本详细信息</strong></p><h4 id="（2）案例实操-2"><a href="#（2）案例实操-2" class="headerlink" title="（2）案例实操"></a>（2）案例实操</h4><p><img src="/..%5Cimg..%5Cimg-20230627134228811.png" alt="..\img-20230627134228811"></p><h3 id="7-2-版本穿梭"><a href="#7-2-版本穿梭" class="headerlink" title="7.2 版本穿梭"></a>7.2 版本穿梭</h3><h4 id="（1）基本语法-3"><a href="#（1）基本语法-3" class="headerlink" title="（1）基本语法"></a>（1）基本语法</h4><p><strong>git reset –hard</strong> <strong>版本号</strong></p><h4 id="（2）案例实操-3"><a href="#（2）案例实操-3" class="headerlink" title="（2）案例实操"></a>（2）案例实操</h4><p>–首先查看当前的历史记录，可以看到当前是在48f4e22这个版本</p><p><img src="/..%5Cimg..%5Cimg-20230627134422376.png" alt="..\img-20230627134422376"></p><p>–切换到之前版本，8ca80d7版本，也就是我们第一次提交的版本</p><p><img src="/..%5Cimg..%5Cimg-20230627134533136.png" alt="..\img-20230627134533136"></p><p>–切换完毕之后再查看历史记录，当前成功切换到了8ca80d7版本</p><p><img src="/..%5Cimg..%5Cimg-20230627134618381.png" alt="..\img-20230627134618381"></p><p>–然后查看文件hello.txt，发现文件内容已经变化</p><p><img src="/..%5Cimg..%5Cimg-20230627134649667.png" alt="..\img-20230627134649667"></p><p> Git切换版本，底层其实是移动的HEAD指针。</p><h1 id="第4章-Git客户端便捷操作"><a href="#第4章-Git客户端便捷操作" class="headerlink" title="第4章 Git客户端便捷操作"></a>第4章 Git客户端便捷操作</h1><h2 id="1-安装部署"><a href="#1-安装部署" class="headerlink" title="1. 安装部署"></a>1. 安装部署</h2><p>使用命令行操作git相对而言是非常不方便的，查看内容也不是很直观，所有官方推荐使用Git的GUI 客户端来完成页面化操作。</p><p><a href="https://git-scm.com/downloads/guis">https://git-scm.com/downloads/guis</a></p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1704960206158.png" alt="1704960206158"></p><p>​    推荐下载使用GitHub Desktop。下载安装之后，选择不登录先进入页面。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1704960312687.png" alt="1704960312687"></p><h2 id="2-基础操作"><a href="#2-基础操作" class="headerlink" title="2. 基础操作"></a>2. 基础操作</h2><h3 id="2-1-设置个人信息"><a href="#2-1-设置个人信息" class="headerlink" title="2.1 设置个人信息"></a>2.1 设置个人信息</h3><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1704960580138.png" alt="1704960580138"></p><h3 id="2-2-创建新的Git仓库"><a href="#2-2-创建新的Git仓库" class="headerlink" title="2.2 创建新的Git仓库"></a>2.2 创建新的Git仓库</h3><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1704960497554.png" alt="1704960497554"></p><h3 id="2-3-提交不同版本"><a href="#2-3-提交不同版本" class="headerlink" title="2.3 提交不同版本"></a>2.3 提交不同版本</h3><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1704960800309.png" alt="1704960800309"></p><p>新创建文件1.txt，并写入信息。之后可以在GitGui上面进行提交。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1704961275801.png" alt="1704961275801"></p><p>多次提交的版本可以直接在History页面查看区别，不需要再使用reset命令。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1704962382919.png" alt="1704962382919"></p><h2 id="3-连接GitHub远程仓库"><a href="#3-连接GitHub远程仓库" class="headerlink" title="3. 连接GitHub远程仓库"></a>3. 连接GitHub远程仓库</h2><p>登录自己注册的账号</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705040350413.png" alt="1705040350413"></p><p>点击Publish可以将当前项目创建到GitHub上面。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705458108708.png" alt="1705458108708"></p><p>之后修改本地文件，就可以先推送到本地git之后再远程同步到GitHub仓库中。</p><p>（1）选择对应的分支</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705458651469.png" alt="1705458651469"></p><p>（2）点击推送</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705458678557.png" alt="1705458678557"></p><p>（3）也可以先在GitHub上面创建远程仓库，之后再拉取到本地保持统一。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705459375393.png" alt="1705459375393"></p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705459556035.png" alt="1705459556035"></p><p>（4）拉取远程仓库到本地</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705459822148.png" alt="1705459822148"></p><p>点击克隆即可，连接完成远程仓库和本地Git之后，在本地修改文件提交Git之后再push推送即可完成同步。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705459901802.png" alt="1705459901802"></p><h2 id="3-Gitee替代GitHub"><a href="#3-Gitee替代GitHub" class="headerlink" title="3. Gitee替代GitHub"></a>3. Gitee替代GitHub</h2><p>GitHub的网站有时候会连接不上，无法登录。可以使用阿里提供的Git远程仓库网站Gitee来代替。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705460369930.png" alt="1705460369930"></p><p>登录账号之后创建新的仓库</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705461501846.png" alt="1705461501846"></p><p>同步远程Gitee仓库的方式和同步GitHub仓库方法完全一致。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705461596842.png" alt="1705461596842"></p><h2 id="4-idea兼容使用Git（JAVA代码）"><a href="#4-idea兼容使用Git（JAVA代码）" class="headerlink" title="4. idea兼容使用Git（JAVA代码）"></a>4. idea兼容使用Git（JAVA代码）</h2><p>（1）首先在idea中创建一个空的项目</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705461792030.png" alt="1705461792030"></p><p>（2）编写基础的JAVA代码Hello world</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705462825829.png" alt="1705462825829"></p><p>（3）此时会产生IDEA中的特定文件</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705462906032.png" alt="1705462906032"></p><p>（4） 配置Git忽略文件</p><ul><li><p><strong>文件名称：xxxx.ignore</strong>（前缀名随便起，建议是git.ignore）</p></li><li><p>这个文件的存放位置原则上在哪里都可以，为了便于让~&#x2F;.gitconfig文件引用，建议也放在用户家目录下</p></li><li><p>git.ignore文件模版内容如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs text"># Compiled class file<br>*.class<br><br># Log file<br>*.log<br><br># BlueJ files<br>*.ctxt<br><br># Mobile Tools for Java (J2ME)<br>.mtj.tmp/<br><br># Package Files #<br>*.jar<br>*.war<br>*.nar<br>*.ear<br>*.zip<br>*.tar.gz<br>*.rar<br><br># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml<br>hs_err_pid*<br><br>.classpath<br>.project<br>.settings<br>target<br>.idea<br>*.iml<br></code></pre></td></tr></table></figure></li></ul><p>（5）在.gitconfig文件中引用</p><p>  （此文件在Windows的家目录中）</p>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[user]</span><br><span class="hljs-attr">name</span> = yhm<br><span class="hljs-attr">email</span> = yaohm7788@<span class="hljs-number">163</span>.com<br><span class="hljs-section">[core]</span><br><span class="hljs-attr">excludesfile</span> = C:/Users/merge/git.ignore<br></code></pre></td></tr></table></figure><p>  注意：这里要使用正斜线（&#x2F;），不要使用反斜线（\）</p><p>（6） 定位Git程序</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705471200362.png" alt="1705471200362"></p><p>（7）初始化本地库</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705471441919.png" alt="1705471441919"></p><p>（8）提交到本地库</p><p>右键点击项目选择Git -&gt; Add将项目添加到暂存区。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705471545505.png" alt="1705471545505"></p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705472084800.png" alt="1705472084800"></p><p>（9）切换版本</p><p>查看历史版本</p><p><img src="/..%5Cimg/wps66.jpg" alt="img"> </p><p><img src="/..%5Cimg/wps67.jpg" alt="img"> </p><p>右键选择要切换的版本，然后在菜单里点击get。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705472349179.png" alt="1705472349179"></p><h1 id="第5章-GitLab的部署与使用"><a href="#第5章-GitLab的部署与使用" class="headerlink" title="第5章 GitLab的部署与使用"></a>第5章 GitLab的部署与使用</h1><h2 id="1-为什么使用GitLab-开发运维一体化"><a href="#1-为什么使用GitLab-开发运维一体化" class="headerlink" title="1.为什么使用GitLab-开发运维一体化"></a>1.为什么使用GitLab-开发运维一体化</h2><p><img src="/..%5Cimg/%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705554047925.png" alt="1705554047925"></p><h2 id="2-部署安装GitLab"><a href="#2-部署安装GitLab" class="headerlink" title="2. 部署安装GitLab"></a>2. 部署安装GitLab</h2><p>使用git，还需要一个远程代码仓库。常见的github、gitee这种远程代码仓库，公司中一般不会使用，因为他们是使用外网的，不够安全。一般企业都会搭建一个仅内网使用的远程代码仓库，最常见就是 GitLab。</p><h3 id="2-1-安装部署"><a href="#2-1-安装部署" class="headerlink" title="2.1 安装部署"></a><strong>2.1</strong> <strong>安装部署</strong></h3><p>GitLab一般由公司的运维人员安装部署，开发人员只需要申请账号和相应权限即可，在这里我们在hadoop104上自己安装GitLab社区版体验一下。</p><h4 id="2-1-1-安装准备"><a href="#2-1-1-安装准备" class="headerlink" title="2.1.1 安装准备"></a><strong>2.1.1</strong> <strong>安装准备</strong></h4><p><strong>1）需要开启ssh：（已开启可跳过）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl status sshd<br>sudo systemctl enable sshd<br>sudo systemctl start sshd<br></code></pre></td></tr></table></figure><p><strong>2）防火墙开放http、https服务：（已关闭防火墙可跳过）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl status firewalld<br>sudo firewall-cmd --permanent --add-service=http<br>sudo firewall-cmd --permanent --add-service=https<br>sudo systemctl reload firewalld<br></code></pre></td></tr></table></figure><h4 id="2-1-2-rpm-包安装"><a href="#2-1-2-rpm-包安装" class="headerlink" title="2.1.2 rpm 包安装"></a><strong>2.1.2</strong> <strong>rpm</strong> <strong>包安装</strong></h4><p><strong>1）上传安装包</strong></p><p>下载地址：<a href="https://packages.gitlab.cn/#browse/search/">https://packages.gitlab.cn/#browse/search/</a></p><p>安装包较大，建议下载好手动上传服务器。这里上传到&#x2F;opt&#x2F;software</p><p><strong>2）编写安装脚本</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> ~/bin<br><span class="hljs-keyword">vim</span> gitlab-install.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install -y curl policycoreutils-python openssh-server perl<br>curl -fsSL https://packages.gitlab.cn/repository/raw/scripts/setup.sh | /bin/bash<br><span class="hljs-built_in">sudo</span> rpm -ivh gitlab-jh-16.6.1-jh.0.el7.x86_64.rpm<br><span class="hljs-built_in">sudo</span> yum install -y postfix<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> postfix<br><span class="hljs-built_in">sudo</span> systemctl start postfix<br></code></pre></td></tr></table></figure><p><strong>3）修改脚本执行权限并执行</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">chmod +x gitlab-install.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword">sh</span> gitlab-install.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>**4）**修改external_url</p><p>编辑gitlab.rb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop104 ~]$ <span class="hljs-built_in">sudo</span> vim /etc/gitlab/gitlab.rb<br></code></pre></td></tr></table></figure><p>在文件中找到external_url，修改为如下内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">external_url</span> <span class="hljs-string">&#x27;http://hadoop104&#x27;</span><br></code></pre></td></tr></table></figure><p>保存退出</p><p>**5）**修改host</p><p>编辑gitlab.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[atguigu@hadoop104 ~]$ sudo vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml.example<br></code></pre></td></tr></table></figure><p>找到gitlab.host修改为如下内容</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">gitlab:</span><br><br>  \<span class="hljs-comment">## Web server settings (**note:** host is the FQDN, do not include http://)</span><br><br>  <span class="hljs-params">host:</span> hadoop104<br><br>  <span class="hljs-params">port:</span> <span class="hljs-number">80</span><br><br>  <span class="hljs-params">https:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>保存退出</p><p>修改文件名称</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[atguigu<span class="hljs-meta">@hadoop104</span> <span class="hljs-operator">~</span>]$ sudo mv <span class="hljs-regexp">/opt/</span>gitlab<span class="hljs-regexp">/embedded/</span>service<span class="hljs-regexp">/gitlab-rails/</span>config<span class="hljs-regexp">/gitlab.yml.example /</span>opt<span class="hljs-regexp">/gitlab/</span>embedded<span class="hljs-regexp">/service/</span>gitlab<span class="hljs-operator">-</span>rails<span class="hljs-regexp">/config/</span>gitlab.yml<br></code></pre></td></tr></table></figure><p><strong>6</strong>）重装需要彻底卸载</p><p>1 卸载gitlab</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[atguigu<span class="hljs-variable">@hadoop104</span> opt]<span class="hljs-variable">$ </span>sudo rpm -e gitlab-jh-<span class="hljs-number">16.6</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>2 删除gitlab文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[atguigu@hadoop104 opt]$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /etc/gitlab<br>[atguigu@hadoop104 opt]$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/opt/gitlab<br>[atguigu@hadoop104 opt]$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /opt/gitlab<br></code></pre></td></tr></table></figure><p>3 重装如果卡在sudo gitlab-ctl reconfigure配置命令上，可以使用另外一个窗口执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart gitlab-runsvdir<br></code></pre></td></tr></table></figure><h4 id="2-1-3-执行初始化"><a href="#2-1-3-执行初始化" class="headerlink" title="2.1.3 执行初始化"></a><strong>2.1.3</strong> <strong>执行初始化</strong></h4><p>执行过程大概需要3分钟：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-ctl reconfigure<br></code></pre></td></tr></table></figure><h4 id="2-1-4-启停命令"><a href="#2-1-4-启停命令" class="headerlink" title="2.1.4 启停命令"></a><strong>2.1.4</strong> <strong>启停命令</strong></h4><p><strong>1</strong>）启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gitlab-ctl start<br></code></pre></td></tr></table></figure><p><strong>2）停止命令</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo gitlab-ctl stop<br></code></pre></td></tr></table></figure><h4 id="2-1-5-修改-root-密码"><a href="#2-1-5-修改-root-密码" class="headerlink" title="2.1.5 修改 root 密码"></a><strong>2.1.5</strong> <strong>修改 root</strong> <strong>密码</strong></h4><p><strong>1</strong>）访问Web页面</p><p>默认使用80端口，直接浏览器输入安装服务器的hostname或ip：hadoop104</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706067954154.png" alt="1706067954154"></p><p>2）查看root密码</p><p>账号root，密码将随机生成并在 &#x2F;etc&#x2F;gitlab&#x2F;initial_root_password 中保存24 小时：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cat</span> /etc/gitlab/initial_root_password<br><br>zOyGe6aBQbkfYf6rOZP2qaWQOAo59K0HMrq9Rs7Yi2w=<br></code></pre></td></tr></table></figure><p>修改密码：</p><p><img src="/..%5Cimg/wps2222.jpg" alt="suimg"> </p><h4 id="2-1-6-设置简体中文"><a href="#2-1-6-设置简体中文" class="headerlink" title="2.1.6 设置简体中文"></a><strong>2.1.6</strong> <strong>设置简体中文</strong></h4><p><img src="/..%5Cimg/wps223.jpg" alt="11img"> </p><p>回到首页，可以看到变成中文：</p><p><img src="/..%5Cimg/wps2224.jpg" alt="sud122img"> </p><h2 id="3-使用GitLab完成团队管理"><a href="#3-使用GitLab完成团队管理" class="headerlink" title="3. 使用GitLab完成团队管理"></a>3. 使用GitLab完成团队管理</h2><p>去到一家公司，应该是已经有了GitLab平台，运维人员拥有root管理员账号。而作为一名普通的开发人员，你的leader和同事都拥有各自的GitLab账号和不同权限。入职后，你只需要申请开通GitLab账号和对应权限，不需要你来操作。</p><h3 id="3-1-创建用户"><a href="#3-1-创建用户" class="headerlink" title="3.1 创建用户"></a><strong>3.1</strong> <strong>创建用户</strong></h3><p>为了更符合公司实际，我们假设数据组的leader账号为tutou，你是atguigu。</p><p><img src="/..%5Cimg/wps2225.jpg" alt="rgimg"> </p><p>创建一个leader的账号：</p><p><img src="/..%5Cimg/wps22122.jpg" alt="11img"> </p><p>再申请一个atguigu账号</p><p><img src="/..%5Cimg/wps2227.jpg" alt="121img"> </p><p>用户会收到重置密码的邮件，也可以由管理员设置：</p><p><img src="/..%5Cimg/wps8222.jpg" alt="31321img"> </p><p><img src="/..%5Cimg/wps9222.jpg" alt="32321img"> </p><h3 id="3-2-创建群组"><a href="#3-2-创建群组" class="headerlink" title="3.2 创建群组"></a><strong>3.2</strong> <strong>创建群组</strong></h3><p>在gitlab里，可以创建出组、组下的子组。在小公司里可以看见gitlab里边会创建出后端，大数据等等一系列组。尽量不要使用中文创建组名, 可以在组信息中的备注编写中文描述以及中文组名, 组内人员名称也尽量用全拼命名。</p><p>对于人员权限以及角色的控制也比较简单，有如下五种：</p><p>Ø Owner：最高权限，谁去创建组，这个组就被谁拥有，它可以开除管理员，但管理员无法操作owner的角色。</p><p>Ø Maintainer：（管理员-只是具备sudo权限的用户）管理员一般是给小组的组长，或者是给产品线的总监设定。</p><p>Ø Developer：是干活的人，就是写代码的程序员，可以进行代码的上传以及代码的下载，不能下载其他的组内的代码，只能下载它们组的代码。</p><p>Ø Repoter：比如现在有需求，其他组的大牛到我们组过来指导工作，要审视我们的代码，人家就提出需要一个权限，我不能给它developer因为它会改你代码，其他组的人不能改我们组的代码，所以就给一个repoter权限，他只能看，只读权限。</p><p>Ø guest：不用看，匿名，直接去掉。一般出现在从ldap中把离职人员的信息删掉，再去gitlab查这个人的时候，它就是一个guest用户（匿名）需要再到gitlab把它删掉（不删也没事）。</p><p>下面，我们假设研发部群组是rdc，下属后端组、前端组、大数据组等子群组：</p><p><img src="/..%5Cimg/wps12220.jpg" alt="1img"> </p><p><strong>1）创建研发中心群组rdc</strong></p><p><img src="/..%5Cimg/wps12221.jpg" alt="2img"> </p><p><strong>2</strong>）创建大数据组</p><p>在研发中心组下，再创建一个大数据组（当然，其他还会有后端组、前端组等）：</p><p><img src="/..%5Cimg/wps13332.jpg" alt="2img"> </p><p><img src="/..%5Cimg/wps13222.jpg" alt="4img"> </p><p>当然，根据公司情况还可以进一步在数据组下面细分子组（比如：离线、实时、湖等），这里我们就不再细分。</p><p>将数据组的leader设为bigdata的负责人：</p><p><img src="/..%5Cimg/wps12224.jpg" alt="4img"> </p><p>将atguigu添加为普通的开发人员：</p><p><img src="/..%5Cimg/wps15222.jpg" alt="1img"> </p><p>现在我们就有一个顶级群组rdc，其下有一个子群组bigdata，组内有管理员tutou，开发人员atguigu。</p><h2 id="4-使用IDEA兼容GitLab"><a href="#4-使用IDEA兼容GitLab" class="headerlink" title="4.使用IDEA兼容GitLab"></a>4.使用IDEA兼容GitLab</h2><p>**1）**安装 GitLab 插件</p><p><img src="file:///C:\Users\merge\AppData\Local\Temp\ksohtml22268\wps16.jpg" alt="img"> </p><p><strong>2）</strong> <strong>配置 SSH 免密登录</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh-keygen -t rsa -C <span class="hljs-symbol">ergou@</span>atguigu.com<br></code></pre></td></tr></table></figure><p><img src="/..%5Cimg/wps12227.jpg" alt="1img"> </p><p>到用户目录下.ssh查看id_rsa.pub文件</p><p><img src="/..%5Cimg/wps18222.jpg" alt="1img"> </p><p><img src="/..%5Cimg/wps19222.jpg" alt="1img"> </p><p>添加到GitLab中：</p><p><img src="/..%5Cimg/wps20222.jpg" alt="2img"> </p><p>**3）**获取 GitLab 个人令牌</p><p><img src="/..%5Cimg/wps21222.jpg" alt="2img"> </p><p>创建后，可以查看和复制生成的token：</p><p><img src="/..%5Cimg/wps22222.jpg" alt="2img"> </p><p>**4）**添加 GitLab 服务</p><p><img src="/..%5Cimg/wps23222.jpg" alt="2img"> </p><p><img src="/..%5Cimg/wps24222.jpg" alt="2img"> </p><p>**5）**修改默认分支的保护策略</p><p><img src="/..%5Cimg/wps25222.jpg" alt="2img"> </p><h1 id="第6章-企业项目构建与开发分支"><a href="#第6章-企业项目构建与开发分支" class="headerlink" title="第6章 企业项目构建与开发分支"></a>第6章 企业项目构建与开发分支</h1><h2 id="1-GitFlow工作流介绍"><a href="#1-GitFlow工作流介绍" class="headerlink" title="1. GitFlow工作流介绍"></a>1. GitFlow工作流介绍</h2><p>在项目开发过程中使用 Git 的方式常见的有：</p><h3 id="1-1-集中式工作流"><a href="#1-1-集中式工作流" class="headerlink" title="1.1 集中式工作流"></a><strong>1.1 集中式工作流</strong></h3><p>所有修改都提交到 Master 这个分支。比较适合极小团队或单人维护的项目，不建议使用这种方式。</p><p><img src="/..%5Cimg%5Cwps1111.jpg" alt="img"> </p><h3 id="1-2-功能开发工作流"><a href="#1-2-功能开发工作流" class="headerlink" title="1.2 功能开发工作流"></a><strong>1.2 功能开发工作流</strong></h3><p>功能开发应该在一个专门的分支，而不是在 master 分支上。适用于小团队开发。</p><p><img src="/..%5Cimg%5Cwps21111.jpg" alt="img"> </p><h3 id="1-3-GitFlow工作流"><a href="#1-3-GitFlow工作流" class="headerlink" title="1.3 GitFlow工作流"></a><strong>1.3 GitFlow工作流</strong></h3><p>公司中最常用于管理大型项目。为功能开发、发布准备和维护设立了独立的分支，让发布迭代过程更流畅。</p><p><img src="/..%5Cimg%5Cwps13111.jpg" alt="img"> </p><h3 id="1-4-Forking工作流"><a href="#1-4-Forking工作流" class="headerlink" title="1.4 Forking工作流"></a><strong>1.4 Forking工作流</strong></h3><p>在 GitFlow 基础上，充分利用了 Git 的 Fork 和 pull request 的功能以达到代码审核的目的。一般用于跨团队协作、网上开源项目。</p><p><img src="/..%5Cimg%5Cwps41111.jpg" alt="img"> </p><h2 id="2-各分支功能介绍"><a href="#2-各分支功能介绍" class="headerlink" title="2. 各分支功能介绍"></a>2. 各分支功能介绍</h2><p><img src="/..%5Cimg%5Cwps13111.jpg" alt="img"></p><h3 id="2-1-主干分支-master"><a href="#2-1-主干分支-master" class="headerlink" title="2.1 主干分支 master"></a>2.1 主干分支 master</h3><p>主要负责管理正在运行的生产环境代码，永远保持与正在运行的生产环境完全一致。为了保持稳定性一般不会直接在这个分支上修改代码，都是通过其他分支合并过来的。</p><h3 id="2-2-开发分支-develop"><a href="#2-2-开发分支-develop" class="headerlink" title="2.2 开发分支 develop"></a>2.2 开发分支 develop</h3><p>主要负责管理正在开发过程中的代码。一般情况下应该是最新的代码。</p><h3 id="2-3-功能分支-feature"><a href="#2-3-功能分支-feature" class="headerlink" title="2.3 功能分支 feature"></a>2.3 功能分支 feature</h3><p>为了不影响较短周期的开发工作，一般把中长期开发模块，会从开发分支中独立出来。 开发完成后会合并到开发分支。</p><h3 id="2-4-准生产分支（预发布分支）-release"><a href="#2-4-准生产分支（预发布分支）-release" class="headerlink" title="2.4 准生产分支（预发布分支） release"></a>2.4 准生产分支（预发布分支） release</h3><p>较大的版本上线前，会从开发分支中分出准生产分支，进行最后阶段的集成测试。该版本上线后，会合并到主干分支。生产环境运行一段阶段较稳定后可以视情况删除。</p><h3 id="2-5-bug-修理分支-hotfix"><a href="#2-5-bug-修理分支-hotfix" class="headerlink" title="2.5 bug 修理分支 hotfix"></a>2.5 bug 修理分支 hotfix</h3><p>主要负责管理生产环境下出现的紧急修复的代码。 从主干分支分出，修复完毕并测试上线后，并回主干分支和开发分支。并回后，视情况可以删除该分支。</p><h2 id="3-创建项目与分支管理"><a href="#3-创建项目与分支管理" class="headerlink" title="3. 创建项目与分支管理"></a>3. 创建项目与分支管理</h2><p>首先在Gitlab上面按照项目规格创建远程仓库。</p><p><img src="E:\课程\热门视频_git\04-Git\课件..\img%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..\imgs%5C1706084894289.png" alt="1706084894289"></p><h3 id="3-1-idea与远程仓库连接"><a href="#3-1-idea与远程仓库连接" class="headerlink" title="3.1 idea与远程仓库连接"></a>3.1 idea与远程仓库连接</h3><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705473717653.png" alt="1705473717653"></p><h3 id="3-2-不同分支的提交与合并"><a href="#3-2-不同分支的提交与合并" class="headerlink" title="3.2 不同分支的提交与合并"></a>3.2 不同分支的提交与合并</h3><p>（1）新建分支和切换分支</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706087127924.png" alt="1706087127924"></p><p>（2）不同分支提交代码与合并</p><p>首先在feature分支编写第一个模块的模拟代码，并提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">module1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;完成第一个模块的开发&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）合并feature到develop分支</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706088019573.png" alt="1706088019573"></p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706088077244.png" alt="1706088077244"></p><p>审查测试通过之后，完成合并</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706087991195.png" alt="1706087991195"></p><h1 id="第7章-冲突提交"><a href="#第7章-冲突提交" class="headerlink" title="第7章 冲突提交"></a>第7章 冲突提交</h1><p>实际单个模块的开发往往不是单独一个人来进行操作，当多个人协同开发相同的一个项目时，就会涉及到提交冲突的问题。</p><h2 id="1-不同人修改不同文件"><a href="#1-不同人修改不同文件" class="headerlink" title="1. 不同人修改不同文件"></a>1. 不同人修改不同文件</h2><p>（1）在远程仓库添加gitLab.txt</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706146898301.png" alt="1706146898301"></p><p>（2）在本地IDEA中添加代码，继续进行第二个模块的开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始进行模块2的开发&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）提交代码到远程仓库，此时会有报错信息</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705549702169.png" alt="1705549702169"></p><p>Git会智能识别，采用merge合并命令，拉取远端文件到本地进行合并。</p><p>（4）查看Git提交的全部历史记录，可以看到中间有拉取Gitee日志的部分</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706146278780.png" alt="1706146278780"></p><h2 id="2-不同人修改同文件的不同区域"><a href="#2-不同人修改同文件的不同区域" class="headerlink" title="2. 不同人修改同文件的不同区域"></a>2. 不同人修改同文件的不同区域</h2><p>（1）远程仓库修改module1代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;没完成模块1的开发&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）本地IDEA继续添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//添加注释</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;完成模块1的开发&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）提交代码，之后push到远程仓库</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705550474743.png" alt="1705550474743"></p><p>同样可以采用merge命令，git会自动合并不同的区域代码。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706146956838.png" alt="1706146956838"></p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706146975271.png" alt="1706146975271"></p><h2 id="3-不同人修改同文件的相同区域"><a href="#3-不同人修改同文件的相同区域" class="headerlink" title="3. 不同人修改同文件的相同区域"></a>3. 不同人修改同文件的相同区域</h2><p>（1）远程仓库添加模块开发顺利</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705551269043.png" alt="1705551269043"></p><p>（2）本地IDEA添加模块开发遇到了bug</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">module1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;完成第一个模块的开发&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;继续进行第一个模块的二次开发&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;模块开发继续!!!&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;模块开发遇到了bug!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705551516941.png" alt="1705551516941"></p><p>无法直接采用merge命令，需要人为判断哪些作为最终的结果来保留</p><p>（3）之后需要重新提交到远程仓库</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705551702149.png" alt="1705551702149"></p><h2 id="4-同时变更文件名和文件内容"><a href="#4-同时变更文件名和文件内容" class="headerlink" title="4. 同时变更文件名和文件内容"></a>4. 同时变更文件名和文件内容</h2><p>（1）本地IDEA修改原先的文件名称为Module1plus，之后重新开发实现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加注释</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module1plus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;没完成模块1的开发&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;模块1的开发遇到了bug&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;完成了模块1的开发&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;进一步完成了模块1的拓展开发&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）提交代码修改到远程仓库</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705552452300.png" alt="1705552452300"></p><p>可以直接提交成功。</p><h2 id="5-不同人把同一文件改成不同的文件名"><a href="#5-不同人把同一文件改成不同的文件名" class="headerlink" title="5. 不同人把同一文件改成不同的文件名"></a>5. 不同人把同一文件改成不同的文件名</h2><p>（1）远程仓库把文件名称改为module1</p><p>（2）本地IDEA修改文件名称为module3</p><p>（3）提交到远程仓库</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705552598042.png" alt="1705552598042"></p><p>（4）需要手动宣传使用哪一个</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705552665960.png" alt="1705552665960"></p><p>push会导致报错，之后需要用户自己解决保留哪些文件。</p><p>（5）使用命令解决最终的冲突</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">C:</span>\mybigdata\project\gitlab_demo&gt;git status<br><span class="hljs-meta">#删除掉报红找不到的文件</span><br><span class="hljs-symbol">C:</span>\mybigdata\project\gitlab_demo&gt;git rm src<span class="hljs-keyword">/main/</span>java<span class="hljs-keyword">/com/</span>atguigu/Module1Plus.java<br></code></pre></td></tr></table></figure><p>（6）最后重新选择正确的代码提交到仓库</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1706151049392.png" alt="1706151049392"></p><h1 id="第8章-GitLab功能拓展"><a href="#第8章-GitLab功能拓展" class="headerlink" title="第8章 GitLab功能拓展"></a>第8章 GitLab功能拓展</h1><h2 id="1-使用GitLab完成code-review"><a href="#1-使用GitLab完成code-review" class="headerlink" title="1. 使用GitLab完成code review"></a>1. 使用GitLab完成code review</h2><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705557561370.png" alt="11170555705557549518"></p><h2 id="2-CICD部署程序"><a href="#2-CICD部署程序" class="headerlink" title="2. CICD部署程序"></a>2. CICD部署程序</h2><p>使用gitLab的自动部署功能，可以快速实现自动部署，完成运行。</p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705557925090.png" alt="1705557925090"></p><h2 id="3-安装gitLab-runner"><a href="#3-安装gitLab-runner" class="headerlink" title="3. 安装gitLab-runner"></a>3. 安装gitLab-runner</h2><p>上传安装包之后执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> rpm -ivh gitlab-runner-<span class="hljs-number">16</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.x86_64.rpm<br></code></pre></td></tr></table></figure><p>之后运行注册命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo gitlab-runner register<br><span class="hljs-comment">#输入地址</span><br>http:<span class="hljs-regexp">//</span>hadoop104<br><span class="hljs-comment">#输入token </span><br>nqaTgGDeJyFsA5fzg8ck<br><span class="hljs-comment">#输入描述</span><br>[hadoop104]: ci<br><span class="hljs-comment">#输入标签</span><br>ci<br><span class="hljs-comment">#输入记录标签</span><br><br>WARNING: Support <span class="hljs-keyword">for</span> registration tokens and runner parameters <span class="hljs-keyword">in</span> the <span class="hljs-string">&#x27;register&#x27;</span> command has been deprecated <span class="hljs-keyword">in</span> GitLab Runner <span class="hljs-number">15.6</span> and will be replaced with support <span class="hljs-keyword">for</span> authentication tokens. For more information, see https:<span class="hljs-regexp">//</span>docs.gitlab.com<span class="hljs-regexp">/ee/</span>ci<span class="hljs-regexp">/runners/</span>new_creation_workflow <br>Registering runner... succeeded                     runner=nqaTgGDe<br><span class="hljs-comment">#选择运行模式 -&gt; 使用最简单的shell</span><br>shell<br></code></pre></td></tr></table></figure><p>token的位置</p><p><img src="/..%5Cimg/%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705896052634.png" alt="1705896052634"></p><p>注册完成之后，runner就已经上线了。</p><p><img src="/..%5Cimg/%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705896287765.png" alt="1705896287765"></p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705557817529.png" alt="1705557817529"></p><p><img src="/..%5Cimg%5CUsers%5Cmerge%5CAppData%5CRoaming%5CTypora%5Ctypora-user-..%5Cimgs%5C1705898035403.png" alt="1705898035403"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>leetcode：旋转图像</title>
    <link href="/2025/06/27/leetcode%EF%BC%9A%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
    <url>/2025/06/27/leetcode%EF%BC%9A%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>编译原理之复习</title>
    <link href="/2025/06/26/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B9%8B%E5%A4%8D%E4%B9%A0/"/>
    <url>/2025/06/26/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B9%8B%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>唉，怎么编译原理怎么难啊，学了两天还是一头雾水，想学Java了，什么时候才能变成Java大佬啊，唉唉唉唉</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>螺旋矩阵</title>
    <link href="/2025/06/25/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2025/06/25/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<p>哎呦我靠，怎么螺旋矩阵怎么难，感觉接雨水都没这么难，<br>明天开启高三模式了，好累啊<br>过几天更新</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis安装</title>
    <link href="/2025/06/24/redis%E5%AE%89%E8%A3%85/"/>
    <url>/2025/06/24/redis%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>运行下面的命令下载（后面的链接替换为你复制的版本链接）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://download.redis.io/releases/redis-6.2.9.tar.gz<br></code></pre></td></tr></table></figure><p>解压压缩包：</p><p>tar xzf redis-6.2.9.tar.gz<br>bash</p><p>安装Redis</p><p>将解压后的目录移动到usr&#x2F;local⽬录下：</p><p>sudo mv .&#x2F;redis-6.2.9 &#x2F;usr&#x2F;local&#x2F;redis&#x2F;<br>bash<br> 进⼊redis⽬录编译和构建 redis：</p><p>cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F; &amp;&amp; sudo make<br>bash<br>安装redis：</p><p>sudo make install<br>bash</p><ol start="4"><li>注册服务</li></ol><p>上面的步骤已经将redis安装完成，你可以使用redis-server命令开启Redis服务了，但是为了更便捷地操作，我们需要让redis在后台运行并设置开机自启。</p><p>移动配置文件</p><p>将redis配置⽂件（配置文件目录：&#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis.conf）移动到&#x2F;etc&#x2F;⽬录下，便于管理：</p><p>sudo mkdir -p &#x2F;etc&#x2F;redis&#x2F; &amp;&amp; sudo cp &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis.conf &#x2F;etc&#x2F;redis&#x2F;<br>bash<br>注册redis服务</p><p>输入以下命令创建一个新的启动脚本：</p><p>sudo vi &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;redis.service<br>bash<br>按i进入编辑模式输入以下内容后按:wq保存退出：</p><p>[Unit]<br>Description&#x3D;Redis Server<br>After&#x3D;network.target</p><p>[Service]<br>ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf<br>ExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-cli shutdown<br>Restart&#x3D;always</p><p>[Install]<br>WantedBy&#x3D;multi-user.target<br>bash</p><p>设置执行权限</p><p>将启动脚本设置为可执行：</p><p>sudo chmod +x &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;redis.service<br>bash<br>将脚本注册为服务</p><p>使用 systemctl 命令将脚本注册为服务，并启用它以在系统启动时自动启动：</p><p>sudo systemctl daemon-reload &amp;&amp; sudo systemctl enable redis<br>bash<br> 启动服务：</p><p>sudo systemctl start redis<br>bash<br>查看状态</p><p>sudo systemctl status redis<br>bash<br>输出下面的结果，表示Redis服务已经在后台正常运行并启用了开机自启：</p><p>root@ubuntu:&#x2F;etc&#x2F;redis# systemctl status redis<br>● redis.service - Redis Server<br>     Loaded: loaded (&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;redis.service; enabled; vendor preset: enabled)<br>     Active: active (running) since Wed 2024-04-24 17:23:41 CST; 3min 28s ago<br>   Main PID: 28421 (redis-server)<br>      Tasks: 5 (limit: 4568)<br>     Memory: 1.6M<br>        CPU: 854ms<br>     CGroup: &#x2F;system.slice&#x2F;redis.service<br>             └─28421 “&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-server 127.0.0.1:6379” “” “” “” “” “” “” “”<br>AI写代码</p><ol start="3"><li>可选操作和配置<br>查看Redis安装版本<br>运行下面的命令查看已安装的Redis版本：</li></ol><p>redis-server -v<br>bash<br>输出结果： </p><p>配置密码登录<br>Redis 默认情况下是没有启用密码登录的。要启用密码登录，需要手动编辑 Redis 配置文件并设置密码，运行下面的命令（将命令中MyPassword123go替换为你需要设置的密码，该命令也适用于之前修改过密码重置密码）：</p><p>new_password&#x3D;”MyPassword123go”;sudo sed -i.bak -E “s&#x2F;^(\s*#)?\s<em>requirepass\s+.</em>&#x2F;requirepass $new_password&#x2F;“ &#x2F;etc&#x2F;redis&#x2F;redis.conf<br>bash<br>重启Redis服务：</p><p>systemctl restart redis<br>bash<br>验证密码</p><p>使用 redis-cli 工具连接到 Redis 服务器： </p><p>redis-cli<br>bash<br>输入auth命令进行身份验证（auth后跟上一步你设置的密码）：</p><p>auth MyPassword123go<br>bash<br>如果输出OK表示设置密码成功： </p><p>127.0.0.1:6379&gt; auth MyPassword123go<br>OK<br>bash<br> 启用远程访问<br>在启用远程访问前请确保已经配置了密码访问，最好还在防火墙限制了IP访问，不然如果你的云服务器没做防火墙限制的话，分分钟会被黑。因为将 Redis 服务器暴露在公网上会大大增加受到攻击的风险。攻击者可以轻松扫描公网 IP 地址，发现开启了 Redis 服务的服务器，并尝试利用漏洞进行攻击。</p><p>运行下面的命令：</p><p>sudo sed -i ‘s&#x2F;^bind .*&#x2F;bind 0.0.0.0&#x2F;‘ &#x2F;etc&#x2F;redis&#x2F;redis.conf<br>bash<br>重启Redis服务： </p><p>systemctl restart redis<br>bash<br>测试连接：</p><p>redis-cli -h 192.168.31.223 -p 6379 -a MyPassword123go<br>bash<br>redis-cli：是 Redis 提供的一个命令行工具，用于与 Redis 服务器进行交互。</p><p>-h 192.168.31.223：指定要连接的 Redis 服务器的 IP 地址。在这里，192.168.31.223 请替换为你要连接的远程 Redis 服务器的 IP 地址。</p><p>-p 6379：指定 Redis 服务器的端口号。默认情况下，Redis 服务器的端口号是 6379。如果你的 Redis 服务器使用了不同的端口，需要修改为相应的端口号。</p><p>-a MyPassword123go：指定连接到 Redis 服务器所需的密码。在这里，MyPassword123go 替换为你设置的密码。如果远程 Redis 服务器未设置密码，则可以省略该参数。</p><p>卸载Redis<br>请确保你在执行卸载之前备份了重要的数据</p><p>卸载软件：</p><p>sudo apt-get remove –purge redis-server -y<br>bash<br>删除 Redis 配置文件和数据文件：</p><p>sudo rm -rf &#x2F;etc&#x2F;redis &#x2F;var&#x2F;lib&#x2F;redis<br>bash<br>如果你是通过make方式安装的指定版本的Redis，请输入下列命令（可全部复制粘贴运行）：</p><p>sudo systemctl stop redis<br>sudo rm -rf &#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis*<br>sudo rm -rf &#x2F;usr&#x2F;local&#x2F;redis*<br>sudo rm -rf &#x2F;etc&#x2F;redis<br>sudo rm -rf &#x2F;var&#x2F;lib&#x2F;redis<br>sudo rm &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;redis.service<br>sudo systemctl disable redis</p>]]></content>
    
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode238</title>
    <link href="/2025/06/24/Leetcode238/"/>
    <url>/2025/06/24/Leetcode238/</url>
    
    <content type="html"><![CDATA[<p>给你一个整数数组 <code>nums</code>，返回 数组 <code>answer</code> ，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积 。</p><p>题目数据 <strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内。</p><p>请 **不要使用除法，**且在 <code>O(n)</code> 时间复杂度内完成此题。</p><p><strong>示例 1:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入: nums = [<span class="hljs-number">1,2,3,4</span>]<br>输出: [<span class="hljs-number">24,12,8,6</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums = <span class="hljs-comment">[-1,1,0,-3,3]</span><br>输出: <span class="hljs-comment">[0,0,9,0,0]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 105</code></li><li><code>-30 &lt;= nums[i] &lt;= 30</code></li><li>输入 <strong>保证</strong> 数组 <code>answer[i]</code> 在 <strong>32 位</strong> 整数范围内</li></ul><p>**进阶：**你可以在 <code>O(1)</code> 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 <strong>不被视为</strong> 额外空间。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] productExceptSelf(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span> suf[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [len];<br>        suf[len-<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len-<span class="hljs-number">2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            suf[i]=suf[i+<span class="hljs-number">1</span>]*nums[i+<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            suf[i] *= pre;<br>            pre *= nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> suf;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>answer[i] 等于 nums 中除了 nums[i] 之外其余各元素的乘积。换句话说，如果知道了 i 左边所有数的乘积，以及 i 右边所有数的乘积，就可以算出 answer[i]。</p><p>于是：</p><p>定义 pre[i] 表示从 nums[0] 到 nums[i−1] 的乘积。<br>定义 suf[i] 表示从 nums[i+1] 到 nums[n−1] 的乘积。</p><p>我们可以先计算出从 nums[0] 到 nums[i−2] 的乘积 pre[i−1]，再乘上 nums[i−1]，就得到了 pre[i]，即</p><p>pre[i]&#x3D;pre[i−1]⋅nums[i−1]<br>同理有</p><p>suf[i]&#x3D;suf[i+1]⋅nums[i+1]</p><p>以上为基础做法</p><p>给出对的空间复杂度为O1，如何实现？</p><p>答案是将suf顺序直接乘进去，前缀和不断乘即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PDF-test</title>
    <link href="/2025/06/23/PDF-test/"/>
    <url>/2025/06/23/PDF-test/</url>
    
    <content type="html"><![CDATA[<p>部署pdf，有点难度</p><div class="pdf-container">  <iframe src="https://noflowcloud.netlify.app//pdfjs/web/viewer.html?file=/PDF/7小时速通SpringCloud.pdf" width="100%" height="500px"></iframe> </div>]]></content>
    
    
    
    <tags>
      
      <tag>PDF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode189：轮转数组</title>
    <link href="/2025/06/23/Leetcode189%EF%BC%9A%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <url>/2025/06/23/Leetcode189%EF%BC%9A%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>方法三：数组翻转<br>该方法基于如下的事实：当我们将数组的元素向右移动 k 次后，尾部 kmodn 个元素会移动至数组头部，其余元素向后移动 kmodn 个位置。</p><p>该方法为数组的翻转：我们可以先将所有元素翻转，这样尾部的 kmodn 个元素就被移至数组头部，然后我们再翻转 [0,kmodn−1] 区间的元素和 [kmodn,n−1] 区间的元素即能得到最后的答案。</p><p>我们以 n&#x3D;7，k&#x3D;3 为例进行如下展示：</p><pre><code class="hljs">class Solution &#123;    public void rotate(int[] nums, int k) &#123;    k %= nums.length;    reverse(nums, 0, nums.length - 1);    reverse(nums, 0, k - 1);    reverse(nums, k, nums.length - 1);    &#125;public void reverse(int[] nums, int start, int end) &#123;    while (start &lt; end) &#123;        int temp = nums[start];        nums[start] = nums[end];        nums[end] = temp;        start += 1;        end -= 1;    &#125;&#125;&#125;</code></pre><p>复杂度分析</p><p>时间复杂度：O(n)，其中 n 为数组的长度。每个元素被翻转两次，一共 n 个元素，因此总时间复杂度为 O(2n)&#x3D;O(n)。</p><p>空间复杂度：O(1)。</p><p>作者：力扣官方题解<br>链接：<a href="https://leetcode.cn/problems/rotate-array/solutions/551039/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/">https://leetcode.cn/problems/rotate-array/solutions/551039/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/</a><br>来源：力扣（LeetCode）</p><p>引用了美服翻转做法下面的评论(第一条) 希望能帮到大家<br>原地址</p><p>nums &#x3D; “—–&gt;–&gt;”; k &#x3D;3<br>result &#x3D; “–&gt;—–&gt;”;</p><p>reverse “—–&gt;–&gt;” we can get “&lt;–&lt;—–”<br>reverse “&lt;–” we can get “–&gt;&lt;—–”<br>reverse “&lt;—–” we can get “–&gt;—–&gt;”<br>this visualization help me figure it out :)</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chmod读文件之755</title>
    <link href="/2025/06/22/chmod%E8%AF%BB%E6%96%87%E4%BB%B6%E4%B9%8B755/"/>
    <url>/2025/06/22/chmod%E8%AF%BB%E6%96%87%E4%BB%B6%E4%B9%8B755/</url>
    
    <content type="html"><![CDATA[<p>755读文件最经典，r的权限只能看一眼有什么文件，还需要执行权限才能进去看文件内容或者里面的文件夹内容</p><p>注意，要将（比如MySQL这个大类）文件夹设为755，其余人员才能进去，然后将文件夹里面的设置为754，就能实现不能运行了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux的三个问题</title>
    <link href="/2025/06/22/Linux%E7%9A%84%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <url>/2025/06/22/Linux%E7%9A%84%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h1><h1 id="1三个问题"><a href="#1三个问题" class="headerlink" title="1三个问题"></a>1三个问题</h1><p>1.Linux怎么样部署测试环境，部署完了之后怎么样知道是否启动成功了这个项目</p><p>2.部署出现问题，用什么命令去查找相关的logo日志</p><p>3.当某个可执行文件的权限不足时候，怎么做</p><p>基本回答如下</p><p>测试环境用容器来部署。这样可以保证所有开发人员环境统一。可以选择docker或者podman，选择对应compose编写部署文件。使用dockerfile编译与打包程序，可以减少自动化测试时环境造成的编译打包问题。</p><p>出现错误可以有多种选择。一，当应用有使用统一的日志管理中间件时可以直接后台查看日志；二，当使用容器部署测试时，可使用exec命令参数进入shell，查看日志目录与日志文件；三，当dockerfile导出日志数据卷时，可直接查看对应的导出目录；四，在shell中可以使用vim，cat，等命令查看日志文件。</p><p>当可执行文件权限不足时，可使用“ls -la 文件名”查看文件是否有执行权限以及文件属于的用户与用户组。若文件属于当前环境使用的用户，则使用chmod命令添加执行权限；若文件不属于当前用户，且当前用户不存在与文件所有者组中时，应人为判断是否可以修改文件所有者或组，亦或是将当前环境使用的用户加入所有者组中，使用chown进行修改。</p><h1 id="2-进阶"><a href="#2-进阶" class="headerlink" title="2 进阶"></a>2 进阶</h1><p>1、如果项目不用docker容器等部署方式你又怎么查？直接ps -ef grep java 或者ps -ef | grep jdk<br>2、vim本质是编辑本文，需要一下加载文本所有数据的，你这样只会卡死， 监听用tail 粗略看用more 详细看用less ，more和less都可以跳行和搜索，cat一下全部加载也不好<br>3、文件权限不足就改文件权限，你真不怕改出事？ 正确方法就是ls -lrt 看文件的权限，看他属于那个用户，再su切换有权限的用户去操作才是正确的</p><h1 id="3综合可得最佳答案为"><a href="#3综合可得最佳答案为" class="headerlink" title="3综合可得最佳答案为"></a>3综合可得最佳答案为</h1><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>部署测试环境</strong>：优先使用容器化（Docker&#x2F;Podman），通过进程、日志、网络检测确认启动。</li><li><strong>查找日志</strong>：容器化使用 <code>docker logs</code>，非容器化使用 <code>tail</code>&#x2F;<code>grep</code>&#x2F;<code>journalctl</code>。</li><li><strong>权限不足</strong>：优先 <code>chmod +x</code>，必要时修改所有者或用户组，避免过度开放权限。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-21</title>
    <link href="/2025/06/21/6-21/"/>
    <url>/2025/06/21/6-21/</url>
    
    <content type="html"><![CDATA[<h2 id="1终于学完ssm了"><a href="#1终于学完ssm了" class="headerlink" title="1终于学完ssm了"></a>1终于学完ssm了</h2><p>真感觉SSM跟SPringboot没有什么重点啊，除了可能要看源码之外，其他直接跟着项目搞就行了</p><h2 id="2终于弄完计组的一堆作业了"><a href="#2终于弄完计组的一堆作业了" class="headerlink" title="2终于弄完计组的一堆作业了"></a>2终于弄完计组的一堆作业了</h2><p>疑似浪费了一天</p><h2 id="3打算把leetcode重新捡起来"><a href="#3打算把leetcode重新捡起来" class="headerlink" title="3打算把leetcode重新捡起来"></a>3打算把leetcode重新捡起来</h2><p>应该关注个人然后偷看ta的进度</p><h1 id="TODOLIST："><a href="#TODOLIST：" class="headerlink" title="TODOLIST："></a>TODOLIST：</h1><p>1.博客的run netlify命令仍然有问题</p><p>2.天选又开始黑屏休眠了，得关</p><p>3.复习（复健）leetcode</p><p>4.LSTM的PPT之类的</p><p>5.争取考试之前学完Linux跟git</p><p>6.眼睛好不舒服啊啊啊啊啊啊</p><p>休息了，睡了晚安</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode03：无重复字符的最长子串</title>
    <link href="/2025/06/21/Leetcode03%EF%BC%9A%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <url>/2025/06/21/Leetcode03%EF%BC%9A%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></p><p>提示</p><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长 子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;abcabcbb&quot;</span><br><span class="hljs-section">输出: 3 </span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;bbbbb&quot;</span><br><span class="hljs-section">输出: 1</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;pwwkew&quot;</span><br><span class="hljs-section">输出: 3</span><br><span class="hljs-section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br>     请注意，你的答案必须是 子串 的长度，<span class="hljs-string">&quot;pwke&quot;</span> 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-comment">// 记录字符上一次出现的位置</span><br>        <span class="hljs-type">int</span>[] last = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">128</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">128</span>; i++) &#123;<br>            last[i] = -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 窗口开始位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> s.charAt(i);<br>            start = Math.max(start, last[index] + <span class="hljs-number">1</span>);<br>            res   = Math.max(res, i - start + <span class="hljs-number">1</span>);<br>            last[index] = i;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>尝试着解释了一下，希望对大家有所帮助~</p><p>以这个字符串为例：abcabcbb，</p><p>当i等于3时，也就是指向了第二个a, 此时我就需要查之前有没有出现过a, 如果出现了是在哪一个位置出现的。</p><p>然后通过last[index] 查到等于1, 也就是说，如果start 依然等于0的话，那么当前窗口就有两个a了，也就是字符串重复了，所以我们需要移动当前窗口的start指针，移动到什么地方呢？</p><p>移动到什么地方，窗口内就没有重复元素了呢？<br>对了，就是a上一次出现的位置的下一个位置，就是1 + 1 &#x3D; 2。</p><p>当start &#x3D;&#x3D; 2, 当前窗口就没有了重复元素，那么以当前字符为结尾的最长无重复子串就是bca,然后再和之前的res取最大值。</p><p>然后i指向后面的位置，按照同样思路计算。</p><p>start用于标记重复的</p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.20记录</title>
    <link href="/2025/06/20/6-20/"/>
    <url>/2025/06/20/6-20/</url>
    
    <content type="html"><![CDATA[<p>必胜客真好吃吧，感觉是最好吃的西餐了，虽然也没吃过更贵的就是了，生活中的小幸福啊</p><p><img src="F:\MyBlog_hexo\source\img\必胜客.jpg" alt="必胜客"></p>]]></content>
    
    
    
    <tags>
      
      <tag>日常生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo部署之netlify</title>
    <link href="/2025/06/20/netlify%E6%9B%B4%E6%96%B0/"/>
    <url>/2025/06/20/netlify%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="部署后Netlify上未显示最新更改"><a href="#部署后Netlify上未显示最新更改" class="headerlink" title="部署后Netlify上未显示最新更改"></a>部署后Netlify上未显示最新更改</h1><p>关联问题</p><p>[ 为什么Netlify上没有显示最新的更改？](<a href="https://copilot.tencent.com/chat?s=">https://copilot.tencent.com/chat?s=</a> 为什么Netlify上没有显示最新的更改？&amp;fromSource&#x3D;gwzcw.9271037.9271037.9271037&amp;utm_medium&#x3D;cpc&amp;utm_id&#x3D;gwzcw.9271037.9271037.9271037)</p><p>[ Netlify部署后内容未更新怎么办？](<a href="https://copilot.tencent.com/chat?s=">https://copilot.tencent.com/chat?s=</a> Netlify部署后内容未更新怎么办？&amp;fromSource&#x3D;gwzcw.9271037.9271037.9271037&amp;utm_medium&#x3D;cpc&amp;utm_id&#x3D;gwzcw.9271037.9271037.9271037)</p><p>[ 如何确保Netlify显示最新的部署内容？](<a href="https://copilot.tencent.com/chat?s=">https://copilot.tencent.com/chat?s=</a> 如何确保Netlify显示最新的部署内容？&amp;fromSource&#x3D;gwzcw.9271037.9271037.9271037&amp;utm_medium&#x3D;cpc&amp;utm_id&#x3D;gwzcw.9271037.9271037.9271037)</p><p>是因为缓存或者静态文件未正确刷新导致的。下面是解决该问题的一些步骤和技巧：</p><ol><li>清除浏览器缓存：浏览器会缓存静态文件，以提高网页加载速度。但是有时候这会导致最新更改无法及时显示。你可以尝试按下Ctrl + F5（Windows）或者Command + Shift + R（Mac）来强制刷新页面。</li><li>清除Netlify缓存：Netlify也会缓存文件以提高访问速度。你可以进入Netlify的项目设置页面，找到“Build &amp; Deploy”选项，然后点击“Clear cache and deploy site”来清除缓存并重新部署站点。</li><li>检查版本控制：确保你将最新的更改提交到了版本控制系统（如Git）并推送到了Netlify。如果你只是本地修改了文件而没有将其推送到版本控制系统，Netlify将无法检测到更改并进行部署。</li><li>查看部署日志：在Netlify的项目设置页面中，你可以找到“Deploys”选项，并查看最近的部署日志。检查日志中是否有错误或警告信息，以帮助你找出问题所在。</li><li>检查构建设置：如果你使用了构建工具（如Webpack或Gulp），请确保你的构建设置正确。检查构建配置文件，例如webpack.config.js或gulpfile.js，以确保正确设置了文件路径和构建规则。</li><li>强制重新部署：在Netlify的项目设置页面中，你可以手动触发重新部署。这将强制Netlify重新构建和部署站点，以确保最新更改被正确显示。</li></ol><p>总结起来，当部署后Netlify上未显示最新更改时，可以考虑清除浏览器缓存、清除Netlify缓存、检查版本控制、查看部署日志、检查构建设置以及强制重新部署等操作来解决问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/06/20/hello-world/"/>
    <url>/2025/06/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>helloworld</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
